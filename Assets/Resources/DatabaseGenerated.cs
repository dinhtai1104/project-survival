using System;
using System.Collections.Generic;
using BansheeGz.BGDatabase;

//=============================================================
//||                   Generated by BansheeGz Code Generator ||
//=============================================================

#pragma warning disable 414

public partial class DB_Hero : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_Hero(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_Hero(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5243877003846631052UL,4316372892031873179UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.String Name
	{
		get => _Name[Index];
		set => _Name[Index] = value;
	}
	public System.Single BaseHp
	{
		get => _BaseHp[Index];
		set => _BaseHp[Index] = value;
	}
	public System.Single BaseDmg
	{
		get => _BaseDmg[Index];
		set => _BaseDmg[Index] = value;
	}
	public System.Single BaseSpeed
	{
		get => _BaseSpeed[Index];
		set => _BaseSpeed[Index] = value;
	}
	public System.Single BaseDmgCrit
	{
		get => _BaseDmgCrit[Index];
		set => _BaseDmgCrit[Index] = value;
	}
	public System.Single BaseRateCrit
	{
		get => _BaseRateCrit[Index];
		set => _BaseRateCrit[Index] = value;
	}
	public System.Single BaseSpeedMove
	{
		get => _BaseSpeedMove[Index];
		set => _BaseSpeedMove[Index] = value;
	}
	public System.Single BaseJumpForce
	{
		get => _BaseJumpForce[Index];
		set => _BaseJumpForce[Index] = value;
	}
	public System.Int32 BaseJumpCount
	{
		get => _BaseJumpCount[Index];
		set => _BaseJumpCount[Index] = value;
	}
	public System.Int32 FragmentUnlock
	{
		get => _FragmentUnlock[Index];
		set => _FragmentUnlock[Index] = value;
	}
	public System.Single HpGrown
	{
		get => _HpGrown[Index];
		set => _HpGrown[Index] = value;
	}
	public System.Single DmgGrown
	{
		get => _DmgGrown[Index];
		set => _DmgGrown[Index] = value;
	}
	public System.String StoneResource
	{
		get => _StoneResource[Index];
		set => _StoneResource[Index] = value;
	}
	public System.String HeroResource
	{
		get => _HeroResource[Index];
		set => _HeroResource[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5267039628995865983UL, 13784343260172227000UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4641834587922728481UL, 11314439510539779762UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Name;
	public static BansheeGz.BGDatabase.BGFieldString _Name => _ufle12jhs77_Name ?? (_ufle12jhs77_Name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5065658145073017397UL, 6335410625990084798UL), () => _ufle12jhs77_Name = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BaseHp;
	public static BansheeGz.BGDatabase.BGFieldFloat _BaseHp => _ufle12jhs77_BaseHp ?? (_ufle12jhs77_BaseHp = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4925352822879486176UL, 10851938270303475357UL), () => _ufle12jhs77_BaseHp = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BaseDmg;
	public static BansheeGz.BGDatabase.BGFieldFloat _BaseDmg => _ufle12jhs77_BaseDmg ?? (_ufle12jhs77_BaseDmg = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4685939915287789335UL, 5752268995655615904UL), () => _ufle12jhs77_BaseDmg = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BaseSpeed;
	public static BansheeGz.BGDatabase.BGFieldFloat _BaseSpeed => _ufle12jhs77_BaseSpeed ?? (_ufle12jhs77_BaseSpeed = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5456019285824356888UL, 9052262948617222072UL), () => _ufle12jhs77_BaseSpeed = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BaseDmgCrit;
	public static BansheeGz.BGDatabase.BGFieldFloat _BaseDmgCrit => _ufle12jhs77_BaseDmgCrit ?? (_ufle12jhs77_BaseDmgCrit = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5459006405707088889UL, 7698913379795853711UL), () => _ufle12jhs77_BaseDmgCrit = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BaseRateCrit;
	public static BansheeGz.BGDatabase.BGFieldFloat _BaseRateCrit => _ufle12jhs77_BaseRateCrit ?? (_ufle12jhs77_BaseRateCrit = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4718927639019239727UL, 5050654149438609539UL), () => _ufle12jhs77_BaseRateCrit = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BaseSpeedMove;
	public static BansheeGz.BGDatabase.BGFieldFloat _BaseSpeedMove => _ufle12jhs77_BaseSpeedMove ?? (_ufle12jhs77_BaseSpeedMove = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4897439647583330831UL, 15139051505347822478UL), () => _ufle12jhs77_BaseSpeedMove = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BaseJumpForce;
	public static BansheeGz.BGDatabase.BGFieldFloat _BaseJumpForce => _ufle12jhs77_BaseJumpForce ?? (_ufle12jhs77_BaseJumpForce = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5129953956593002372UL, 8362346850489258891UL), () => _ufle12jhs77_BaseJumpForce = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_BaseJumpCount;
	public static BansheeGz.BGDatabase.BGFieldInt _BaseJumpCount => _ufle12jhs77_BaseJumpCount ?? (_ufle12jhs77_BaseJumpCount = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4780537644688294103UL, 7959564072112615569UL), () => _ufle12jhs77_BaseJumpCount = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_FragmentUnlock;
	public static BansheeGz.BGDatabase.BGFieldInt _FragmentUnlock => _ufle12jhs77_FragmentUnlock ?? (_ufle12jhs77_FragmentUnlock = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5749680593488127813UL, 16152671400074513307UL), () => _ufle12jhs77_FragmentUnlock = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_HpGrown;
	public static BansheeGz.BGDatabase.BGFieldFloat _HpGrown => _ufle12jhs77_HpGrown ?? (_ufle12jhs77_HpGrown = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5688159748211341477UL, 18145156859539574692UL), () => _ufle12jhs77_HpGrown = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_DmgGrown;
	public static BansheeGz.BGDatabase.BGFieldFloat _DmgGrown => _ufle12jhs77_DmgGrown ?? (_ufle12jhs77_DmgGrown = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4898799235876853487UL, 2534470913615030918UL), () => _ufle12jhs77_DmgGrown = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_StoneResource;
	public static BansheeGz.BGDatabase.BGFieldString _StoneResource => _ufle12jhs77_StoneResource ?? (_ufle12jhs77_StoneResource = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4651570575680066539UL, 3980229780580602774UL), () => _ufle12jhs77_StoneResource = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_HeroResource;
	public static BansheeGz.BGDatabase.BGFieldString _HeroResource => _ufle12jhs77_HeroResource ?? (_ufle12jhs77_HeroResource = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5760168604070970912UL, 13729226426188846232UL), () => _ufle12jhs77_HeroResource = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_Hero() : base(MetaDefault)
	{
	}
	private DB_Hero(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_Hero(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_Hero(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_Hero FindEntity(Predicate<DB_Hero> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_Hero) entity)) as DB_Hero;
	}
	public static List<DB_Hero> FindEntities(Predicate<DB_Hero> filter, List<DB_Hero> result=null, Comparison<DB_Hero> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_Hero> action, Predicate<DB_Hero> filter=null, Comparison<DB_Hero> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_Hero) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_Hero) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_Hero)e1,(DB_Hero)e2));
	}
	public static DB_Hero GetEntity(BGId entityId) => (DB_Hero) MetaDefault.GetEntity(entityId);
	public static DB_Hero GetEntity(int index) => (DB_Hero) MetaDefault[index];
	public static DB_Hero GetEntity(string entityName) => (DB_Hero) MetaDefault.GetEntity(entityName);
	public static DB_Hero NewEntity() => (DB_Hero) MetaDefault.NewEntity();
	public static DB_Hero NewEntity(BGId entityId) => (DB_Hero) MetaDefault.NewEntity(entityId);
	public static DB_Hero NewEntity(Action<DB_Hero> callback)
	{
		return (DB_Hero) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_Hero)entity)));
	}
}

public partial class DB_Equipment : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_Equipment(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_Equipment(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5395537908791800756UL,13766861042954177700UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 IdNum
	{
		get => _IdNum[Index];
		set => _IdNum[Index] = value;
	}
	public System.String Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.String Type
	{
		get => _Type[Index];
		set => _Type[Index] = value;
	}
	public System.String StatName
	{
		get => _StatName[Index];
		set => _StatName[Index] = value;
	}
	public System.String StatMod
	{
		get => _StatMod[Index];
		set => _StatMod[Index] = value;
	}
	public System.Single StatBase
	{
		get => _StatBase[Index];
		set => _StatBase[Index] = value;
	}
	public System.Single StatGrown
	{
		get => _StatGrown[Index];
		set => _StatGrown[Index] = value;
	}
	public System.String UnCommonType
	{
		get => _UnCommonType[Index];
		set => _UnCommonType[Index] = value;
	}
	public System.String UnCommon
	{
		get => _UnCommon[Index];
		set => _UnCommon[Index] = value;
	}
	public System.String CommonType
	{
		get => _CommonType[Index];
		set => _CommonType[Index] = value;
	}
	public System.String Common
	{
		get => _Common[Index];
		set => _Common[Index] = value;
	}
	public System.String RareType
	{
		get => _RareType[Index];
		set => _RareType[Index] = value;
	}
	public System.String Rare
	{
		get => _Rare[Index];
		set => _Rare[Index] = value;
	}
	public System.String EpicType
	{
		get => _EpicType[Index];
		set => _EpicType[Index] = value;
	}
	public System.String Epic
	{
		get => _Epic[Index];
		set => _Epic[Index] = value;
	}
	public System.String LegendaryType
	{
		get => _LegendaryType[Index];
		set => _LegendaryType[Index] = value;
	}
	public System.String Legendary
	{
		get => _Legendary[Index];
		set => _Legendary[Index] = value;
	}
	public System.String UltimateType
	{
		get => _UltimateType[Index];
		set => _UltimateType[Index] = value;
	}
	public System.String Ultimate
	{
		get => _Ultimate[Index];
		set => _Ultimate[Index] = value;
	}
	public System.String Passive
	{
		get => _Passive[Index];
		set => _Passive[Index] = value;
	}
	public System.String FragmentType
	{
		get => _FragmentType[Index];
		set => _FragmentType[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4739512125529395062UL, 17679884997286122635UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_IdNum;
	public static BansheeGz.BGDatabase.BGFieldInt _IdNum => _ufle12jhs77_IdNum ?? (_ufle12jhs77_IdNum = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4747344832097040516UL, 12674672404726659231UL), () => _ufle12jhs77_IdNum = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldString _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5015718537860379796UL, 3931168762515265410UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Type;
	public static BansheeGz.BGDatabase.BGFieldString _Type => _ufle12jhs77_Type ?? (_ufle12jhs77_Type = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4923620080404054221UL, 16748566542567469243UL), () => _ufle12jhs77_Type = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_StatName;
	public static BansheeGz.BGDatabase.BGFieldString _StatName => _ufle12jhs77_StatName ?? (_ufle12jhs77_StatName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5231487568523154507UL, 2866938435799585184UL), () => _ufle12jhs77_StatName = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_StatMod;
	public static BansheeGz.BGDatabase.BGFieldString _StatMod => _ufle12jhs77_StatMod ?? (_ufle12jhs77_StatMod = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5511828137944806915UL, 4282586352448194985UL), () => _ufle12jhs77_StatMod = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_StatBase;
	public static BansheeGz.BGDatabase.BGFieldFloat _StatBase => _ufle12jhs77_StatBase ?? (_ufle12jhs77_StatBase = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5732951033196534332UL, 10339481151420649399UL), () => _ufle12jhs77_StatBase = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_StatGrown;
	public static BansheeGz.BGDatabase.BGFieldFloat _StatGrown => _ufle12jhs77_StatGrown ?? (_ufle12jhs77_StatGrown = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4697707884768530144UL, 5903711230778180017UL), () => _ufle12jhs77_StatGrown = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_UnCommonType;
	public static BansheeGz.BGDatabase.BGFieldString _UnCommonType => _ufle12jhs77_UnCommonType ?? (_ufle12jhs77_UnCommonType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5475814093965660002UL, 16482243134825707907UL), () => _ufle12jhs77_UnCommonType = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_UnCommon;
	public static BansheeGz.BGDatabase.BGFieldString _UnCommon => _ufle12jhs77_UnCommon ?? (_ufle12jhs77_UnCommon = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5228246751739588643UL, 6927579020758946486UL), () => _ufle12jhs77_UnCommon = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_CommonType;
	public static BansheeGz.BGDatabase.BGFieldString _CommonType => _ufle12jhs77_CommonType ?? (_ufle12jhs77_CommonType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5739736705595864374UL, 13214956747356344214UL), () => _ufle12jhs77_CommonType = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Common;
	public static BansheeGz.BGDatabase.BGFieldString _Common => _ufle12jhs77_Common ?? (_ufle12jhs77_Common = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5117381108473374839UL, 6939726260963996599UL), () => _ufle12jhs77_Common = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_RareType;
	public static BansheeGz.BGDatabase.BGFieldString _RareType => _ufle12jhs77_RareType ?? (_ufle12jhs77_RareType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5284114990866983380UL, 3355418848714059187UL), () => _ufle12jhs77_RareType = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Rare;
	public static BansheeGz.BGDatabase.BGFieldString _Rare => _ufle12jhs77_Rare ?? (_ufle12jhs77_Rare = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4785277872759572386UL, 6054456419190686640UL), () => _ufle12jhs77_Rare = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_EpicType;
	public static BansheeGz.BGDatabase.BGFieldString _EpicType => _ufle12jhs77_EpicType ?? (_ufle12jhs77_EpicType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4847858212770507435UL, 7222359999114067862UL), () => _ufle12jhs77_EpicType = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Epic;
	public static BansheeGz.BGDatabase.BGFieldString _Epic => _ufle12jhs77_Epic ?? (_ufle12jhs77_Epic = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4695183240115190391UL, 17173658227347508668UL), () => _ufle12jhs77_Epic = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_LegendaryType;
	public static BansheeGz.BGDatabase.BGFieldString _LegendaryType => _ufle12jhs77_LegendaryType ?? (_ufle12jhs77_LegendaryType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5762249893893345675UL, 14987239150363559567UL), () => _ufle12jhs77_LegendaryType = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Legendary;
	public static BansheeGz.BGDatabase.BGFieldString _Legendary => _ufle12jhs77_Legendary ?? (_ufle12jhs77_Legendary = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5648806076665671080UL, 2334425670317403569UL), () => _ufle12jhs77_Legendary = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_UltimateType;
	public static BansheeGz.BGDatabase.BGFieldString _UltimateType => _ufle12jhs77_UltimateType ?? (_ufle12jhs77_UltimateType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5722950555079538615UL, 14081547432183825854UL), () => _ufle12jhs77_UltimateType = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Ultimate;
	public static BansheeGz.BGDatabase.BGFieldString _Ultimate => _ufle12jhs77_Ultimate ?? (_ufle12jhs77_Ultimate = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5550624583233865298UL, 12975942882297272486UL), () => _ufle12jhs77_Ultimate = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Passive;
	public static BansheeGz.BGDatabase.BGFieldString _Passive => _ufle12jhs77_Passive ?? (_ufle12jhs77_Passive = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5525446181498026365UL, 9246102219788897938UL), () => _ufle12jhs77_Passive = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_FragmentType;
	public static BansheeGz.BGDatabase.BGFieldString _FragmentType => _ufle12jhs77_FragmentType ?? (_ufle12jhs77_FragmentType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5493422236352551594UL, 2076120721876573853UL), () => _ufle12jhs77_FragmentType = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_Equipment() : base(MetaDefault)
	{
	}
	private DB_Equipment(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_Equipment(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_Equipment(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_Equipment FindEntity(Predicate<DB_Equipment> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_Equipment) entity)) as DB_Equipment;
	}
	public static List<DB_Equipment> FindEntities(Predicate<DB_Equipment> filter, List<DB_Equipment> result=null, Comparison<DB_Equipment> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_Equipment> action, Predicate<DB_Equipment> filter=null, Comparison<DB_Equipment> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_Equipment) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_Equipment) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_Equipment)e1,(DB_Equipment)e2));
	}
	public static DB_Equipment GetEntity(BGId entityId) => (DB_Equipment) MetaDefault.GetEntity(entityId);
	public static DB_Equipment GetEntity(int index) => (DB_Equipment) MetaDefault[index];
	public static DB_Equipment GetEntity(string entityName) => (DB_Equipment) MetaDefault.GetEntity(entityName);
	public static DB_Equipment NewEntity() => (DB_Equipment) MetaDefault.NewEntity();
	public static DB_Equipment NewEntity(BGId entityId) => (DB_Equipment) MetaDefault.NewEntity(entityId);
	public static DB_Equipment NewEntity(Action<DB_Equipment> callback)
	{
		return (DB_Equipment) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_Equipment)entity)));
	}
}

public partial class DB_Buff : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_Buff(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_Buff(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5542673463093644548UL,16815363924003592126UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.String Type
	{
		get => _Type[Index];
		set => _Type[Index] = value;
	}
	public System.Int32 MaxLevel
	{
		get => _MaxLevel[Index];
		set => _MaxLevel[Index] = value;
	}
	public System.Collections.Generic.List<System.String> BaseBuff
	{
		get => _BaseBuff[Index];
		set => _BaseBuff[Index] = value;
	}
	public System.String Classify
	{
		get => _Classify[Index];
		set => _Classify[Index] = value;
	}
	public System.String Icon
	{
		get => _Icon[Index];
		set => _Icon[Index] = value;
	}
	public System.Single Point
	{
		get => _Point[Index];
		set => _Point[Index] = value;
	}
	/**<summary><![CDATA[
	PickType:
None: No Pick
Normal: In Game
Angel: In Angel Room

	]]></summary>*/
	public System.String PickType
	{
		get => _PickType[Index];
		set => _PickType[Index] = value;
	}
	public System.Int32 DungeonUnlock
	{
		get => _DungeonUnlock[Index];
		set => _DungeonUnlock[Index] = value;
	}
	public System.Collections.Generic.List<System.String> BuffCondition
	{
		get => _BuffCondition[Index];
		set => _BuffCondition[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5293335220720681160UL, 9453909422016418223UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4929812718449251528UL, 680070807336553893UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Type;
	public static BansheeGz.BGDatabase.BGFieldString _Type => _ufle12jhs77_Type ?? (_ufle12jhs77_Type = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5299398461775364210UL, 11750599987170099597UL), () => _ufle12jhs77_Type = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_MaxLevel;
	public static BansheeGz.BGDatabase.BGFieldInt _MaxLevel => _ufle12jhs77_MaxLevel ?? (_ufle12jhs77_MaxLevel = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4655389368289104405UL, 9481533693704389549UL), () => _ufle12jhs77_MaxLevel = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_BaseBuff;
	public static BansheeGz.BGDatabase.BGFieldListString _BaseBuff => _ufle12jhs77_BaseBuff ?? (_ufle12jhs77_BaseBuff = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5221024519792014274UL, 18046628408437502369UL), () => _ufle12jhs77_BaseBuff = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Classify;
	public static BansheeGz.BGDatabase.BGFieldString _Classify => _ufle12jhs77_Classify ?? (_ufle12jhs77_Classify = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4679654484224095209UL, 13919875871848266893UL), () => _ufle12jhs77_Classify = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Icon;
	public static BansheeGz.BGDatabase.BGFieldString _Icon => _ufle12jhs77_Icon ?? (_ufle12jhs77_Icon = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5194194085449412219UL, 3392457653361320074UL), () => _ufle12jhs77_Icon = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_Point;
	public static BansheeGz.BGDatabase.BGFieldFloat _Point => _ufle12jhs77_Point ?? (_ufle12jhs77_Point = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4883281309840347005UL, 17426739853694863773UL), () => _ufle12jhs77_Point = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_PickType;
	public static BansheeGz.BGDatabase.BGFieldString _PickType => _ufle12jhs77_PickType ?? (_ufle12jhs77_PickType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4884023252623183433UL, 11508575136912433580UL), () => _ufle12jhs77_PickType = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_DungeonUnlock;
	public static BansheeGz.BGDatabase.BGFieldInt _DungeonUnlock => _ufle12jhs77_DungeonUnlock ?? (_ufle12jhs77_DungeonUnlock = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5606966204064299265UL, 2168305699209538463UL), () => _ufle12jhs77_DungeonUnlock = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_BuffCondition;
	public static BansheeGz.BGDatabase.BGFieldListString _BuffCondition => _ufle12jhs77_BuffCondition ?? (_ufle12jhs77_BuffCondition = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5259711212416005989UL, 6813916592211914428UL), () => _ufle12jhs77_BuffCondition = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_Buff() : base(MetaDefault)
	{
	}
	private DB_Buff(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_Buff(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_Buff(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_Buff FindEntity(Predicate<DB_Buff> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_Buff) entity)) as DB_Buff;
	}
	public static List<DB_Buff> FindEntities(Predicate<DB_Buff> filter, List<DB_Buff> result=null, Comparison<DB_Buff> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_Buff> action, Predicate<DB_Buff> filter=null, Comparison<DB_Buff> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_Buff) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_Buff) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_Buff)e1,(DB_Buff)e2));
	}
	public static DB_Buff GetEntity(BGId entityId) => (DB_Buff) MetaDefault.GetEntity(entityId);
	public static DB_Buff GetEntity(int index) => (DB_Buff) MetaDefault[index];
	public static DB_Buff GetEntity(string entityName) => (DB_Buff) MetaDefault.GetEntity(entityName);
	public static DB_Buff NewEntity() => (DB_Buff) MetaDefault.NewEntity();
	public static DB_Buff NewEntity(BGId entityId) => (DB_Buff) MetaDefault.NewEntity(entityId);
	public static DB_Buff NewEntity(Action<DB_Buff> callback)
	{
		return (DB_Buff) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_Buff)entity)));
	}
}

public partial class DB_Enemy : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_Enemy(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_Enemy(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5350922170501795851UL,13246798979182324649UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.Single BaseHp
	{
		get => _BaseHp[Index];
		set => _BaseHp[Index] = value;
	}
	public System.Single BaseDmg
	{
		get => _BaseDmg[Index];
		set => _BaseDmg[Index] = value;
	}
	public System.Single BaseSpeed
	{
		get => _BaseSpeed[Index];
		set => _BaseSpeed[Index] = value;
	}
	public System.Single BaseRangeAtk
	{
		get => _BaseRangeAtk[Index];
		set => _BaseRangeAtk[Index] = value;
	}
	public System.Single BaseCooldownAtk
	{
		get => _BaseCooldownAtk[Index];
		set => _BaseCooldownAtk[Index] = value;
	}
	public System.Single BodySize
	{
		get => _BodySize[Index];
		set => _BodySize[Index] = value;
	}
	public System.String BodyType
	{
		get => _BodyType[Index];
		set => _BodyType[Index] = value;
	}
	public System.Single HpGrown
	{
		get => _HpGrown[Index];
		set => _HpGrown[Index] = value;
	}
	public System.Single DmgGrown
	{
		get => _DmgGrown[Index];
		set => _DmgGrown[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Tag
	{
		get => _Tag[Index];
		set => _Tag[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5292281965227114908UL, 17857581282358372521UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldString _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5067281465973257072UL, 1644061030737020811UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BaseHp;
	public static BansheeGz.BGDatabase.BGFieldFloat _BaseHp => _ufle12jhs77_BaseHp ?? (_ufle12jhs77_BaseHp = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5723728654348779361UL, 15271813027740728479UL), () => _ufle12jhs77_BaseHp = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BaseDmg;
	public static BansheeGz.BGDatabase.BGFieldFloat _BaseDmg => _ufle12jhs77_BaseDmg ?? (_ufle12jhs77_BaseDmg = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4904675556457742980UL, 18066868370032902037UL), () => _ufle12jhs77_BaseDmg = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BaseSpeed;
	public static BansheeGz.BGDatabase.BGFieldFloat _BaseSpeed => _ufle12jhs77_BaseSpeed ?? (_ufle12jhs77_BaseSpeed = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4653641927342409029UL, 12227420383784560567UL), () => _ufle12jhs77_BaseSpeed = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BaseRangeAtk;
	public static BansheeGz.BGDatabase.BGFieldFloat _BaseRangeAtk => _ufle12jhs77_BaseRangeAtk ?? (_ufle12jhs77_BaseRangeAtk = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4890317356331552449UL, 12112973502091485852UL), () => _ufle12jhs77_BaseRangeAtk = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BaseCooldownAtk;
	public static BansheeGz.BGDatabase.BGFieldFloat _BaseCooldownAtk => _ufle12jhs77_BaseCooldownAtk ?? (_ufle12jhs77_BaseCooldownAtk = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5725116284195381630UL, 17536020852510544807UL), () => _ufle12jhs77_BaseCooldownAtk = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BodySize;
	public static BansheeGz.BGDatabase.BGFieldFloat _BodySize => _ufle12jhs77_BodySize ?? (_ufle12jhs77_BodySize = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5585315231182488159UL, 10639648079722316215UL), () => _ufle12jhs77_BodySize = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_BodyType;
	public static BansheeGz.BGDatabase.BGFieldString _BodyType => _ufle12jhs77_BodyType ?? (_ufle12jhs77_BodyType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4877926332479387982UL, 8710807476773561791UL), () => _ufle12jhs77_BodyType = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_HpGrown;
	public static BansheeGz.BGDatabase.BGFieldFloat _HpGrown => _ufle12jhs77_HpGrown ?? (_ufle12jhs77_HpGrown = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5186468889265769914UL, 15735754261415860893UL), () => _ufle12jhs77_HpGrown = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_DmgGrown;
	public static BansheeGz.BGDatabase.BGFieldFloat _DmgGrown => _ufle12jhs77_DmgGrown ?? (_ufle12jhs77_DmgGrown = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5752356080831724389UL, 16413632084133712285UL), () => _ufle12jhs77_DmgGrown = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Tag;
	public static BansheeGz.BGDatabase.BGFieldListString _Tag => _ufle12jhs77_Tag ?? (_ufle12jhs77_Tag = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5474408156404413735UL, 6262087975163402937UL), () => _ufle12jhs77_Tag = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_Enemy() : base(MetaDefault)
	{
	}
	private DB_Enemy(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_Enemy(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_Enemy(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_Enemy FindEntity(Predicate<DB_Enemy> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_Enemy) entity)) as DB_Enemy;
	}
	public static List<DB_Enemy> FindEntities(Predicate<DB_Enemy> filter, List<DB_Enemy> result=null, Comparison<DB_Enemy> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_Enemy> action, Predicate<DB_Enemy> filter=null, Comparison<DB_Enemy> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_Enemy) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_Enemy) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_Enemy)e1,(DB_Enemy)e2));
	}
	public static DB_Enemy GetEntity(BGId entityId) => (DB_Enemy) MetaDefault.GetEntity(entityId);
	public static DB_Enemy GetEntity(int index) => (DB_Enemy) MetaDefault[index];
	public static DB_Enemy GetEntity(string entityName) => (DB_Enemy) MetaDefault.GetEntity(entityName);
	public static DB_Enemy NewEntity() => (DB_Enemy) MetaDefault.NewEntity();
	public static DB_Enemy NewEntity(BGId entityId) => (DB_Enemy) MetaDefault.NewEntity(entityId);
	public static DB_Enemy NewEntity(Action<DB_Enemy> callback)
	{
		return (DB_Enemy) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_Enemy)entity)));
	}
}

public partial class DB_BattlePass : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_BattlePass(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_BattlePass(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5191974926076537008UL,8775210860688319676UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.Int32 Level
	{
		get => _Level[Index];
		set => _Level[Index] = value;
	}
	public System.Int32 ExpRequire
	{
		get => _ExpRequire[Index];
		set => _ExpRequire[Index] = value;
	}
	public System.String Free
	{
		get => _Free[Index];
		set => _Free[Index] = value;
	}
	public System.String Premium
	{
		get => _Premium[Index];
		set => _Premium[Index] = value;
	}
	public System.String ProductId
	{
		get => _ProductId[Index];
		set => _ProductId[Index] = value;
	}
	public System.Int32 Time
	{
		get => _Time[Index];
		set => _Time[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4651204958717018311UL, 16928098980127024805UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5145009575981076286UL, 12583360265243611521UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Level;
	public static BansheeGz.BGDatabase.BGFieldInt _Level => _ufle12jhs77_Level ?? (_ufle12jhs77_Level = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5325061837097268424UL, 11403130912821841302UL), () => _ufle12jhs77_Level = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_ExpRequire;
	public static BansheeGz.BGDatabase.BGFieldInt _ExpRequire => _ufle12jhs77_ExpRequire ?? (_ufle12jhs77_ExpRequire = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5427280238833880873UL, 16769070454713345468UL), () => _ufle12jhs77_ExpRequire = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Free;
	public static BansheeGz.BGDatabase.BGFieldString _Free => _ufle12jhs77_Free ?? (_ufle12jhs77_Free = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5720425223256753787UL, 4686328929898664639UL), () => _ufle12jhs77_Free = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Premium;
	public static BansheeGz.BGDatabase.BGFieldString _Premium => _ufle12jhs77_Premium ?? (_ufle12jhs77_Premium = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5406663536421635609UL, 10402349364474094514UL), () => _ufle12jhs77_Premium = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ProductId;
	public static BansheeGz.BGDatabase.BGFieldString _ProductId => _ufle12jhs77_ProductId ?? (_ufle12jhs77_ProductId = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4778391249443264205UL, 3265249621596170427UL), () => _ufle12jhs77_ProductId = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Time;
	public static BansheeGz.BGDatabase.BGFieldInt _Time => _ufle12jhs77_Time ?? (_ufle12jhs77_Time = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5418483642365597242UL, 486970961894443448UL), () => _ufle12jhs77_Time = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_BattlePass() : base(MetaDefault)
	{
	}
	private DB_BattlePass(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_BattlePass(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_BattlePass(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_BattlePass FindEntity(Predicate<DB_BattlePass> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_BattlePass) entity)) as DB_BattlePass;
	}
	public static List<DB_BattlePass> FindEntities(Predicate<DB_BattlePass> filter, List<DB_BattlePass> result=null, Comparison<DB_BattlePass> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_BattlePass> action, Predicate<DB_BattlePass> filter=null, Comparison<DB_BattlePass> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_BattlePass) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_BattlePass) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_BattlePass)e1,(DB_BattlePass)e2));
	}
	public static DB_BattlePass GetEntity(BGId entityId) => (DB_BattlePass) MetaDefault.GetEntity(entityId);
	public static DB_BattlePass GetEntity(int index) => (DB_BattlePass) MetaDefault[index];
	public static DB_BattlePass GetEntity(string entityName) => (DB_BattlePass) MetaDefault.GetEntity(entityName);
	public static DB_BattlePass NewEntity() => (DB_BattlePass) MetaDefault.NewEntity();
	public static DB_BattlePass NewEntity(BGId entityId) => (DB_BattlePass) MetaDefault.NewEntity(entityId);
	public static DB_BattlePass NewEntity(Action<DB_BattlePass> callback)
	{
		return (DB_BattlePass) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_BattlePass)entity)));
	}
}

public partial class DB_Weapon : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_Weapon(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_Weapon(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5277560189336409994UL,7331554178697227909UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.Single FireRate
	{
		get => _FireRate[Index];
		set => _FireRate[Index] = value;
	}
	public System.Single BulletVelocity
	{
		get => _BulletVelocity[Index];
		set => _BulletVelocity[Index] = value;
	}
	public System.Single OutputDmg
	{
		get => _OutputDmg[Index];
		set => _OutputDmg[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5377037954758485572UL, 17982601453817286580UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldString _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4908837099485140396UL, 10208680502616182431UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_FireRate;
	public static BansheeGz.BGDatabase.BGFieldFloat _FireRate => _ufle12jhs77_FireRate ?? (_ufle12jhs77_FireRate = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5279558228012610605UL, 5238083927364645784UL), () => _ufle12jhs77_FireRate = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BulletVelocity;
	public static BansheeGz.BGDatabase.BGFieldFloat _BulletVelocity => _ufle12jhs77_BulletVelocity ?? (_ufle12jhs77_BulletVelocity = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5306910968885826256UL, 2639417542120413322UL), () => _ufle12jhs77_BulletVelocity = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_OutputDmg;
	public static BansheeGz.BGDatabase.BGFieldFloat _OutputDmg => _ufle12jhs77_OutputDmg ?? (_ufle12jhs77_OutputDmg = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5213678612133630996UL, 2761191000807472771UL), () => _ufle12jhs77_OutputDmg = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_Weapon() : base(MetaDefault)
	{
	}
	private DB_Weapon(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_Weapon(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_Weapon(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_Weapon FindEntity(Predicate<DB_Weapon> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_Weapon) entity)) as DB_Weapon;
	}
	public static List<DB_Weapon> FindEntities(Predicate<DB_Weapon> filter, List<DB_Weapon> result=null, Comparison<DB_Weapon> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_Weapon> action, Predicate<DB_Weapon> filter=null, Comparison<DB_Weapon> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_Weapon) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_Weapon) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_Weapon)e1,(DB_Weapon)e2));
	}
	public static DB_Weapon GetEntity(BGId entityId) => (DB_Weapon) MetaDefault.GetEntity(entityId);
	public static DB_Weapon GetEntity(int index) => (DB_Weapon) MetaDefault[index];
	public static DB_Weapon GetEntity(string entityName) => (DB_Weapon) MetaDefault.GetEntity(entityName);
	public static DB_Weapon NewEntity() => (DB_Weapon) MetaDefault.NewEntity();
	public static DB_Weapon NewEntity(BGId entityId) => (DB_Weapon) MetaDefault.NewEntity(entityId);
	public static DB_Weapon NewEntity(Action<DB_Weapon> callback)
	{
		return (DB_Weapon) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_Weapon)entity)));
	}
}

public partial class DB_HeroLevelUpgrade : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_HeroLevelUpgrade(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_HeroLevelUpgrade(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4959278074013397937UL,18331441445553358508UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String Hero
	{
		get => _Hero[Index];
		set => _Hero[Index] = value;
	}
	public System.Int32 Level
	{
		get => _Level[Index];
		set => _Level[Index] = value;
	}
	public System.Int32 StoneValue
	{
		get => _StoneValue[Index];
		set => _StoneValue[Index] = value;
	}
	public System.String CostValue
	{
		get => _CostValue[Index];
		set => _CostValue[Index] = value;
	}
	public System.String Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	public System.Int32 IsUseForAllHero
	{
		get => _IsUseForAllHero[Index];
		set => _IsUseForAllHero[Index] = value;
	}
	public System.String CostType
	{
		get => _CostType[Index];
		set => _CostType[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5380352268430468288UL, 15750461705157971867UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Hero;
	public static BansheeGz.BGDatabase.BGFieldString _Hero => _ufle12jhs77_Hero ?? (_ufle12jhs77_Hero = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5126632734664309087UL, 12790563631916811169UL), () => _ufle12jhs77_Hero = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Level;
	public static BansheeGz.BGDatabase.BGFieldInt _Level => _ufle12jhs77_Level ?? (_ufle12jhs77_Level = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4846447229867915416UL, 6640599484229196692UL), () => _ufle12jhs77_Level = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_StoneValue;
	public static BansheeGz.BGDatabase.BGFieldInt _StoneValue => _ufle12jhs77_StoneValue ?? (_ufle12jhs77_StoneValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5036962647525938128UL, 3814183924619287456UL), () => _ufle12jhs77_StoneValue = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_CostValue;
	public static BansheeGz.BGDatabase.BGFieldString _CostValue => _ufle12jhs77_CostValue ?? (_ufle12jhs77_CostValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5672591334631291776UL, 1141033710161300156UL), () => _ufle12jhs77_CostValue = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5199095788974465934UL, 9750358587788695684UL), () => _ufle12jhs77_Reward = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_IsUseForAllHero;
	public static BansheeGz.BGDatabase.BGFieldInt _IsUseForAllHero => _ufle12jhs77_IsUseForAllHero ?? (_ufle12jhs77_IsUseForAllHero = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4704387052407582553UL, 9665281568952667293UL), () => _ufle12jhs77_IsUseForAllHero = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_CostType;
	public static BansheeGz.BGDatabase.BGFieldString _CostType => _ufle12jhs77_CostType ?? (_ufle12jhs77_CostType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5535832046320926803UL, 6676896996608725153UL), () => _ufle12jhs77_CostType = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_HeroLevelUpgrade() : base(MetaDefault)
	{
	}
	private DB_HeroLevelUpgrade(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_HeroLevelUpgrade(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_HeroLevelUpgrade(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_HeroLevelUpgrade FindEntity(Predicate<DB_HeroLevelUpgrade> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_HeroLevelUpgrade) entity)) as DB_HeroLevelUpgrade;
	}
	public static List<DB_HeroLevelUpgrade> FindEntities(Predicate<DB_HeroLevelUpgrade> filter, List<DB_HeroLevelUpgrade> result=null, Comparison<DB_HeroLevelUpgrade> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_HeroLevelUpgrade> action, Predicate<DB_HeroLevelUpgrade> filter=null, Comparison<DB_HeroLevelUpgrade> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_HeroLevelUpgrade) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_HeroLevelUpgrade) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_HeroLevelUpgrade)e1,(DB_HeroLevelUpgrade)e2));
	}
	public static DB_HeroLevelUpgrade GetEntity(BGId entityId) => (DB_HeroLevelUpgrade) MetaDefault.GetEntity(entityId);
	public static DB_HeroLevelUpgrade GetEntity(int index) => (DB_HeroLevelUpgrade) MetaDefault[index];
	public static DB_HeroLevelUpgrade GetEntity(string entityName) => (DB_HeroLevelUpgrade) MetaDefault.GetEntity(entityName);
	public static DB_HeroLevelUpgrade NewEntity() => (DB_HeroLevelUpgrade) MetaDefault.NewEntity();
	public static DB_HeroLevelUpgrade NewEntity(BGId entityId) => (DB_HeroLevelUpgrade) MetaDefault.NewEntity(entityId);
	public static DB_HeroLevelUpgrade NewEntity(Action<DB_HeroLevelUpgrade> callback)
	{
		return (DB_HeroLevelUpgrade) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_HeroLevelUpgrade)entity)));
	}
}

public partial class DB_EquipmentRarity : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_EquipmentRarity(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_EquipmentRarity(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5110604003689535625UL,6204910836996165269UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String Rarity
	{
		get => _Rarity[Index];
		set => _Rarity[Index] = value;
	}
	public System.Int32 MaxLevel
	{
		get => _MaxLevel[Index];
		set => _MaxLevel[Index] = value;
	}
	public System.Single BonusStatMul
	{
		get => _BonusStatMul[Index];
		set => _BonusStatMul[Index] = value;
	}
	public System.Single DmgBase
	{
		get => _DmgBase[Index];
		set => _DmgBase[Index] = value;
	}
	public System.Single DmgGrown
	{
		get => _DmgGrown[Index];
		set => _DmgGrown[Index] = value;
	}
	public System.Single HpBase
	{
		get => _HpBase[Index];
		set => _HpBase[Index] = value;
	}
	public System.Single HpGrown
	{
		get => _HpGrown[Index];
		set => _HpGrown[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4749751185055762998UL, 2724898901846514823UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Rarity;
	public static BansheeGz.BGDatabase.BGFieldString _Rarity => _ufle12jhs77_Rarity ?? (_ufle12jhs77_Rarity = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5671611047290411981UL, 8383879122082769844UL), () => _ufle12jhs77_Rarity = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_MaxLevel;
	public static BansheeGz.BGDatabase.BGFieldInt _MaxLevel => _ufle12jhs77_MaxLevel ?? (_ufle12jhs77_MaxLevel = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5200293495573944837UL, 15619766473930988426UL), () => _ufle12jhs77_MaxLevel = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_BonusStatMul;
	public static BansheeGz.BGDatabase.BGFieldFloat _BonusStatMul => _ufle12jhs77_BonusStatMul ?? (_ufle12jhs77_BonusStatMul = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5552035033075229423UL, 12367474184067167894UL), () => _ufle12jhs77_BonusStatMul = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_DmgBase;
	public static BansheeGz.BGDatabase.BGFieldFloat _DmgBase => _ufle12jhs77_DmgBase ?? (_ufle12jhs77_DmgBase = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4950666832199003406UL, 12528212928094094231UL), () => _ufle12jhs77_DmgBase = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_DmgGrown;
	public static BansheeGz.BGDatabase.BGFieldFloat _DmgGrown => _ufle12jhs77_DmgGrown ?? (_ufle12jhs77_DmgGrown = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5001746095462121617UL, 14795999076622805656UL), () => _ufle12jhs77_DmgGrown = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_HpBase;
	public static BansheeGz.BGDatabase.BGFieldFloat _HpBase => _ufle12jhs77_HpBase ?? (_ufle12jhs77_HpBase = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5094388925330301345UL, 2339709729795466897UL), () => _ufle12jhs77_HpBase = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_HpGrown;
	public static BansheeGz.BGDatabase.BGFieldFloat _HpGrown => _ufle12jhs77_HpGrown ?? (_ufle12jhs77_HpGrown = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5588142556416859722UL, 2069146535952684458UL), () => _ufle12jhs77_HpGrown = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_EquipmentRarity() : base(MetaDefault)
	{
	}
	private DB_EquipmentRarity(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_EquipmentRarity(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_EquipmentRarity(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_EquipmentRarity FindEntity(Predicate<DB_EquipmentRarity> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_EquipmentRarity) entity)) as DB_EquipmentRarity;
	}
	public static List<DB_EquipmentRarity> FindEntities(Predicate<DB_EquipmentRarity> filter, List<DB_EquipmentRarity> result=null, Comparison<DB_EquipmentRarity> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_EquipmentRarity> action, Predicate<DB_EquipmentRarity> filter=null, Comparison<DB_EquipmentRarity> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_EquipmentRarity) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_EquipmentRarity) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_EquipmentRarity)e1,(DB_EquipmentRarity)e2));
	}
	public static DB_EquipmentRarity GetEntity(BGId entityId) => (DB_EquipmentRarity) MetaDefault.GetEntity(entityId);
	public static DB_EquipmentRarity GetEntity(int index) => (DB_EquipmentRarity) MetaDefault[index];
	public static DB_EquipmentRarity GetEntity(string entityName) => (DB_EquipmentRarity) MetaDefault.GetEntity(entityName);
	public static DB_EquipmentRarity NewEntity() => (DB_EquipmentRarity) MetaDefault.NewEntity();
	public static DB_EquipmentRarity NewEntity(BGId entityId) => (DB_EquipmentRarity) MetaDefault.NewEntity(entityId);
	public static DB_EquipmentRarity NewEntity(Action<DB_EquipmentRarity> callback)
	{
		return (DB_EquipmentRarity) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_EquipmentRarity)entity)));
	}
}

public partial class DB_Exp : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_Exp(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_Exp(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5631022657020825689UL,11511383992511010691UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Level
	{
		get => _Level[Index];
		set => _Level[Index] = value;
	}
	public System.Int64 ExpRequire
	{
		get => _ExpRequire[Index];
		set => _ExpRequire[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5394574124186948298UL, 17169001795924179358UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Level;
	public static BansheeGz.BGDatabase.BGFieldInt _Level => _ufle12jhs77_Level ?? (_ufle12jhs77_Level = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4912964727670860038UL, 8991592602193798841UL), () => _ufle12jhs77_Level = null));
	private static BansheeGz.BGDatabase.BGFieldLong _ufle12jhs77_ExpRequire;
	public static BansheeGz.BGDatabase.BGFieldLong _ExpRequire => _ufle12jhs77_ExpRequire ?? (_ufle12jhs77_ExpRequire = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldLong>(MetaDefault, new BGId(5325586615302134000UL, 9373438295588470688UL), () => _ufle12jhs77_ExpRequire = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_Exp() : base(MetaDefault)
	{
	}
	private DB_Exp(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_Exp(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_Exp(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_Exp FindEntity(Predicate<DB_Exp> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_Exp) entity)) as DB_Exp;
	}
	public static List<DB_Exp> FindEntities(Predicate<DB_Exp> filter, List<DB_Exp> result=null, Comparison<DB_Exp> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_Exp> action, Predicate<DB_Exp> filter=null, Comparison<DB_Exp> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_Exp) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_Exp) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_Exp)e1,(DB_Exp)e2));
	}
	public static DB_Exp GetEntity(BGId entityId) => (DB_Exp) MetaDefault.GetEntity(entityId);
	public static DB_Exp GetEntity(int index) => (DB_Exp) MetaDefault[index];
	public static DB_Exp GetEntity(string entityName) => (DB_Exp) MetaDefault.GetEntity(entityName);
	public static DB_Exp NewEntity() => (DB_Exp) MetaDefault.NewEntity();
	public static DB_Exp NewEntity(BGId entityId) => (DB_Exp) MetaDefault.NewEntity(entityId);
	public static DB_Exp NewEntity(Action<DB_Exp> callback)
	{
		return (DB_Exp) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_Exp)entity)));
	}
}

public partial class DB_GeneralConfig : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_GeneralConfig(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_GeneralConfig(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4691045074128538129UL,2475873981485078184UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String ConfigName
	{
		get => _ConfigName[Index];
		set => _ConfigName[Index] = value;
	}
	public System.String ConfigValue
	{
		get => _ConfigValue[Index];
		set => _ConfigValue[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4975721958281182457UL, 7677087912898459283UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ConfigName;
	public static BansheeGz.BGDatabase.BGFieldString _ConfigName => _ufle12jhs77_ConfigName ?? (_ufle12jhs77_ConfigName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4771785839273025154UL, 8252798049119018630UL), () => _ufle12jhs77_ConfigName = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ConfigValue;
	public static BansheeGz.BGDatabase.BGFieldString _ConfigValue => _ufle12jhs77_ConfigValue ?? (_ufle12jhs77_ConfigValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4678940922231424478UL, 8735614810622988165UL), () => _ufle12jhs77_ConfigValue = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_GeneralConfig() : base(MetaDefault)
	{
	}
	private DB_GeneralConfig(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_GeneralConfig(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_GeneralConfig(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_GeneralConfig FindEntity(Predicate<DB_GeneralConfig> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_GeneralConfig) entity)) as DB_GeneralConfig;
	}
	public static List<DB_GeneralConfig> FindEntities(Predicate<DB_GeneralConfig> filter, List<DB_GeneralConfig> result=null, Comparison<DB_GeneralConfig> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_GeneralConfig> action, Predicate<DB_GeneralConfig> filter=null, Comparison<DB_GeneralConfig> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_GeneralConfig) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_GeneralConfig) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_GeneralConfig)e1,(DB_GeneralConfig)e2));
	}
	public static DB_GeneralConfig GetEntity(BGId entityId) => (DB_GeneralConfig) MetaDefault.GetEntity(entityId);
	public static DB_GeneralConfig GetEntity(int index) => (DB_GeneralConfig) MetaDefault[index];
	public static DB_GeneralConfig GetEntity(string entityName) => (DB_GeneralConfig) MetaDefault.GetEntity(entityName);
	public static DB_GeneralConfig NewEntity() => (DB_GeneralConfig) MetaDefault.NewEntity();
	public static DB_GeneralConfig NewEntity(BGId entityId) => (DB_GeneralConfig) MetaDefault.NewEntity(entityId);
	public static DB_GeneralConfig NewEntity(Action<DB_GeneralConfig> callback)
	{
		return (DB_GeneralConfig) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_GeneralConfig)entity)));
	}
}

public partial class DB_BlackSmithUpgrade : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_BlackSmithUpgrade(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_BlackSmithUpgrade(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5260269116389874541UL,15023798232735792829UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 EnhanceLevel
	{
		get => _EnhanceLevel[Index];
		set => _EnhanceLevel[Index] = value;
	}
	public System.Int32 EnhanceGold
	{
		get => _EnhanceGold[Index];
		set => _EnhanceGold[Index] = value;
	}
	public System.String ResourceCost
	{
		get => _ResourceCost[Index];
		set => _ResourceCost[Index] = value;
	}
	public System.String EquipmentType
	{
		get => _EquipmentType[Index];
		set => _EquipmentType[Index] = value;
	}
	public System.String ResourceType
	{
		get => _ResourceType[Index];
		set => _ResourceType[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5596310570782816796UL, 16292061105720732042UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_EnhanceLevel;
	public static BansheeGz.BGDatabase.BGFieldInt _EnhanceLevel => _ufle12jhs77_EnhanceLevel ?? (_ufle12jhs77_EnhanceLevel = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5701162195890528340UL, 11526418229438291358UL), () => _ufle12jhs77_EnhanceLevel = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_EnhanceGold;
	public static BansheeGz.BGDatabase.BGFieldInt _EnhanceGold => _ufle12jhs77_EnhanceGold ?? (_ufle12jhs77_EnhanceGold = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5394524610084288917UL, 15084802609999726480UL), () => _ufle12jhs77_EnhanceGold = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ResourceCost;
	public static BansheeGz.BGDatabase.BGFieldString _ResourceCost => _ufle12jhs77_ResourceCost ?? (_ufle12jhs77_ResourceCost = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4778820652020450820UL, 11350628178778155951UL), () => _ufle12jhs77_ResourceCost = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_EquipmentType;
	public static BansheeGz.BGDatabase.BGFieldString _EquipmentType => _ufle12jhs77_EquipmentType ?? (_ufle12jhs77_EquipmentType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5054798246155159627UL, 4037561405324854680UL), () => _ufle12jhs77_EquipmentType = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ResourceType;
	public static BansheeGz.BGDatabase.BGFieldString _ResourceType => _ufle12jhs77_ResourceType ?? (_ufle12jhs77_ResourceType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5405431845025502501UL, 5381610830161759393UL), () => _ufle12jhs77_ResourceType = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_BlackSmithUpgrade() : base(MetaDefault)
	{
	}
	private DB_BlackSmithUpgrade(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_BlackSmithUpgrade(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_BlackSmithUpgrade(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_BlackSmithUpgrade FindEntity(Predicate<DB_BlackSmithUpgrade> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_BlackSmithUpgrade) entity)) as DB_BlackSmithUpgrade;
	}
	public static List<DB_BlackSmithUpgrade> FindEntities(Predicate<DB_BlackSmithUpgrade> filter, List<DB_BlackSmithUpgrade> result=null, Comparison<DB_BlackSmithUpgrade> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_BlackSmithUpgrade> action, Predicate<DB_BlackSmithUpgrade> filter=null, Comparison<DB_BlackSmithUpgrade> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_BlackSmithUpgrade) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_BlackSmithUpgrade) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_BlackSmithUpgrade)e1,(DB_BlackSmithUpgrade)e2));
	}
	public static DB_BlackSmithUpgrade GetEntity(BGId entityId) => (DB_BlackSmithUpgrade) MetaDefault.GetEntity(entityId);
	public static DB_BlackSmithUpgrade GetEntity(int index) => (DB_BlackSmithUpgrade) MetaDefault[index];
	public static DB_BlackSmithUpgrade GetEntity(string entityName) => (DB_BlackSmithUpgrade) MetaDefault.GetEntity(entityName);
	public static DB_BlackSmithUpgrade NewEntity() => (DB_BlackSmithUpgrade) MetaDefault.NewEntity();
	public static DB_BlackSmithUpgrade NewEntity(BGId entityId) => (DB_BlackSmithUpgrade) MetaDefault.NewEntity(entityId);
	public static DB_BlackSmithUpgrade NewEntity(Action<DB_BlackSmithUpgrade> callback)
	{
		return (DB_BlackSmithUpgrade) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_BlackSmithUpgrade)entity)));
	}
}

public partial class DB_NoelBattlePass : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_NoelBattlePass(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_NoelBattlePass(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5148429547896741220UL,16684471408953799359UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.String Mission
	{
		get => _Mission[Index];
		set => _Mission[Index] = value;
	}
	public System.Collections.Generic.List<System.Int32> MissionTarget
	{
		get => _MissionTarget[Index];
		set => _MissionTarget[Index] = value;
	}
	public System.Collections.Generic.List<System.String> RewardFree
	{
		get => _RewardFree[Index];
		set => _RewardFree[Index] = value;
	}
	public System.Collections.Generic.List<System.String> RewardPremium
	{
		get => _RewardPremium[Index];
		set => _RewardPremium[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4786197296751156350UL, 15883359936164775049UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5654599505686873105UL, 9019926797075215257UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Mission;
	public static BansheeGz.BGDatabase.BGFieldString _Mission => _ufle12jhs77_Mission ?? (_ufle12jhs77_Mission = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5179138491929615923UL, 6872200188228581019UL), () => _ufle12jhs77_Mission = null));
	private static BansheeGz.BGDatabase.BGFieldListInt _ufle12jhs77_MissionTarget;
	public static BansheeGz.BGDatabase.BGFieldListInt _MissionTarget => _ufle12jhs77_MissionTarget ?? (_ufle12jhs77_MissionTarget = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListInt>(MetaDefault, new BGId(5399061303215920090UL, 1308658054093777855UL), () => _ufle12jhs77_MissionTarget = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_RewardFree;
	public static BansheeGz.BGDatabase.BGFieldListString _RewardFree => _ufle12jhs77_RewardFree ?? (_ufle12jhs77_RewardFree = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5309885108297625539UL, 16055345146602119825UL), () => _ufle12jhs77_RewardFree = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_RewardPremium;
	public static BansheeGz.BGDatabase.BGFieldListString _RewardPremium => _ufle12jhs77_RewardPremium ?? (_ufle12jhs77_RewardPremium = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(4779530578264134766UL, 2624118369411176337UL), () => _ufle12jhs77_RewardPremium = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_NoelBattlePass() : base(MetaDefault)
	{
	}
	private DB_NoelBattlePass(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_NoelBattlePass(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_NoelBattlePass(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_NoelBattlePass FindEntity(Predicate<DB_NoelBattlePass> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_NoelBattlePass) entity)) as DB_NoelBattlePass;
	}
	public static List<DB_NoelBattlePass> FindEntities(Predicate<DB_NoelBattlePass> filter, List<DB_NoelBattlePass> result=null, Comparison<DB_NoelBattlePass> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_NoelBattlePass> action, Predicate<DB_NoelBattlePass> filter=null, Comparison<DB_NoelBattlePass> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_NoelBattlePass) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_NoelBattlePass) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_NoelBattlePass)e1,(DB_NoelBattlePass)e2));
	}
	public static DB_NoelBattlePass GetEntity(BGId entityId) => (DB_NoelBattlePass) MetaDefault.GetEntity(entityId);
	public static DB_NoelBattlePass GetEntity(int index) => (DB_NoelBattlePass) MetaDefault[index];
	public static DB_NoelBattlePass GetEntity(string entityName) => (DB_NoelBattlePass) MetaDefault.GetEntity(entityName);
	public static DB_NoelBattlePass NewEntity() => (DB_NoelBattlePass) MetaDefault.NewEntity();
	public static DB_NoelBattlePass NewEntity(BGId entityId) => (DB_NoelBattlePass) MetaDefault.NewEntity(entityId);
	public static DB_NoelBattlePass NewEntity(Action<DB_NoelBattlePass> callback)
	{
		return (DB_NoelBattlePass) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_NoelBattlePass)entity)));
	}
}

public partial class DB_AffixEquipment : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_AffixEquipment(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_AffixEquipment(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5014414286604599832UL,8988059594186025611UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.String Rarity
	{
		get => _Rarity[Index];
		set => _Rarity[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Equipment
	{
		get => _Equipment[Index];
		set => _Equipment[Index] = value;
	}
	public System.String Params
	{
		get => _Params[Index];
		set => _Params[Index] = value;
	}
	public System.String TypeAffix
	{
		get => _TypeAffix[Index];
		set => _TypeAffix[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5320726936840001880UL, 2268361186595111831UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldString _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5586497118324326929UL, 4874139637892721301UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Rarity;
	public static BansheeGz.BGDatabase.BGFieldString _Rarity => _ufle12jhs77_Rarity ?? (_ufle12jhs77_Rarity = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5221484607336044535UL, 6238741563060492960UL), () => _ufle12jhs77_Rarity = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Equipment;
	public static BansheeGz.BGDatabase.BGFieldListString _Equipment => _ufle12jhs77_Equipment ?? (_ufle12jhs77_Equipment = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5236345532810411280UL, 4161284536770873222UL), () => _ufle12jhs77_Equipment = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Params;
	public static BansheeGz.BGDatabase.BGFieldString _Params => _ufle12jhs77_Params ?? (_ufle12jhs77_Params = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4895574452682477481UL, 17481571436764228782UL), () => _ufle12jhs77_Params = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_TypeAffix;
	public static BansheeGz.BGDatabase.BGFieldString _TypeAffix => _ufle12jhs77_TypeAffix ?? (_ufle12jhs77_TypeAffix = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5397967081627088387UL, 6196795197440097162UL), () => _ufle12jhs77_TypeAffix = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_AffixEquipment() : base(MetaDefault)
	{
	}
	private DB_AffixEquipment(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_AffixEquipment(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_AffixEquipment(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_AffixEquipment FindEntity(Predicate<DB_AffixEquipment> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_AffixEquipment) entity)) as DB_AffixEquipment;
	}
	public static List<DB_AffixEquipment> FindEntities(Predicate<DB_AffixEquipment> filter, List<DB_AffixEquipment> result=null, Comparison<DB_AffixEquipment> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_AffixEquipment> action, Predicate<DB_AffixEquipment> filter=null, Comparison<DB_AffixEquipment> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_AffixEquipment) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_AffixEquipment) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_AffixEquipment)e1,(DB_AffixEquipment)e2));
	}
	public static DB_AffixEquipment GetEntity(BGId entityId) => (DB_AffixEquipment) MetaDefault.GetEntity(entityId);
	public static DB_AffixEquipment GetEntity(int index) => (DB_AffixEquipment) MetaDefault[index];
	public static DB_AffixEquipment GetEntity(string entityName) => (DB_AffixEquipment) MetaDefault.GetEntity(entityName);
	public static DB_AffixEquipment NewEntity() => (DB_AffixEquipment) MetaDefault.NewEntity();
	public static DB_AffixEquipment NewEntity(BGId entityId) => (DB_AffixEquipment) MetaDefault.NewEntity(entityId);
	public static DB_AffixEquipment NewEntity(Action<DB_AffixEquipment> callback)
	{
		return (DB_AffixEquipment) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_AffixEquipment)entity)));
	}
}

public partial class DB_DungeonStage : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DungeonStage(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DungeonStage(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5720523914174042723UL,3316896150810635947UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String Stage
	{
		get => _Stage[Index];
		set => _Stage[Index] = value;
	}
	public System.Collections.Generic.List<System.Int32> Room
	{
		get => _Room[Index];
		set => _Room[Index] = value;
	}
	public System.Int32 EnemyLevel
	{
		get => _EnemyLevel[Index];
		set => _EnemyLevel[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5125257693846327571UL, 4396494514848695994UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Stage;
	public static BansheeGz.BGDatabase.BGFieldString _Stage => _ufle12jhs77_Stage ?? (_ufle12jhs77_Stage = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5744867210860901879UL, 1125251045740512700UL), () => _ufle12jhs77_Stage = null));
	private static BansheeGz.BGDatabase.BGFieldListInt _ufle12jhs77_Room;
	public static BansheeGz.BGDatabase.BGFieldListInt _Room => _ufle12jhs77_Room ?? (_ufle12jhs77_Room = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListInt>(MetaDefault, new BGId(4636626139423132254UL, 7555594922368122801UL), () => _ufle12jhs77_Room = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_EnemyLevel;
	public static BansheeGz.BGDatabase.BGFieldInt _EnemyLevel => _ufle12jhs77_EnemyLevel ?? (_ufle12jhs77_EnemyLevel = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4676716322083337131UL, 7205776451389589666UL), () => _ufle12jhs77_EnemyLevel = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DungeonStage() : base(MetaDefault)
	{
	}
	private DB_DungeonStage(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DungeonStage(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DungeonStage(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DungeonStage FindEntity(Predicate<DB_DungeonStage> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DungeonStage) entity)) as DB_DungeonStage;
	}
	public static List<DB_DungeonStage> FindEntities(Predicate<DB_DungeonStage> filter, List<DB_DungeonStage> result=null, Comparison<DB_DungeonStage> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DungeonStage> action, Predicate<DB_DungeonStage> filter=null, Comparison<DB_DungeonStage> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DungeonStage) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DungeonStage) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DungeonStage)e1,(DB_DungeonStage)e2));
	}
	public static DB_DungeonStage GetEntity(BGId entityId) => (DB_DungeonStage) MetaDefault.GetEntity(entityId);
	public static DB_DungeonStage GetEntity(int index) => (DB_DungeonStage) MetaDefault[index];
	public static DB_DungeonStage GetEntity(string entityName) => (DB_DungeonStage) MetaDefault.GetEntity(entityName);
	public static DB_DungeonStage NewEntity() => (DB_DungeonStage) MetaDefault.NewEntity();
	public static DB_DungeonStage NewEntity(BGId entityId) => (DB_DungeonStage) MetaDefault.NewEntity(entityId);
	public static DB_DungeonStage NewEntity(Action<DB_DungeonStage> callback)
	{
		return (DB_DungeonStage) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DungeonStage)entity)));
	}
}

public partial class DB_Dungeon : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_Dungeon(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_Dungeon(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5323443023188858832UL,11350925351388066719UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Dungeon
	{
		get => _Dungeon[Index];
		set => _Dungeon[Index] = value;
	}
	public System.String Stages
	{
		get => _Stages[Index];
		set => _Stages[Index] = value;
	}
	public System.Int32 Buff
	{
		get => _Buff[Index];
		set => _Buff[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5212616668716130181UL, 4770002085923785897UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Dungeon;
	public static BansheeGz.BGDatabase.BGFieldInt _Dungeon => _ufle12jhs77_Dungeon ?? (_ufle12jhs77_Dungeon = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5042081486377527953UL, 14174353549734211457UL), () => _ufle12jhs77_Dungeon = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Stages;
	public static BansheeGz.BGDatabase.BGFieldString _Stages => _ufle12jhs77_Stages ?? (_ufle12jhs77_Stages = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5590702065905444613UL, 6600830206191194001UL), () => _ufle12jhs77_Stages = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Buff;
	public static BansheeGz.BGDatabase.BGFieldInt _Buff => _ufle12jhs77_Buff ?? (_ufle12jhs77_Buff = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5621062690188011241UL, 11208355179000369287UL), () => _ufle12jhs77_Buff = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldListString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(4841806509708696752UL, 1681820840795730613UL), () => _ufle12jhs77_Reward = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_Dungeon() : base(MetaDefault)
	{
	}
	private DB_Dungeon(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_Dungeon(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_Dungeon(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_Dungeon FindEntity(Predicate<DB_Dungeon> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_Dungeon) entity)) as DB_Dungeon;
	}
	public static List<DB_Dungeon> FindEntities(Predicate<DB_Dungeon> filter, List<DB_Dungeon> result=null, Comparison<DB_Dungeon> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_Dungeon> action, Predicate<DB_Dungeon> filter=null, Comparison<DB_Dungeon> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_Dungeon) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_Dungeon) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_Dungeon)e1,(DB_Dungeon)e2));
	}
	public static DB_Dungeon GetEntity(BGId entityId) => (DB_Dungeon) MetaDefault.GetEntity(entityId);
	public static DB_Dungeon GetEntity(int index) => (DB_Dungeon) MetaDefault[index];
	public static DB_Dungeon GetEntity(string entityName) => (DB_Dungeon) MetaDefault.GetEntity(entityName);
	public static DB_Dungeon NewEntity() => (DB_Dungeon) MetaDefault.NewEntity();
	public static DB_Dungeon NewEntity(BGId entityId) => (DB_Dungeon) MetaDefault.NewEntity(entityId);
	public static DB_Dungeon NewEntity(Action<DB_Dungeon> callback)
	{
		return (DB_Dungeon) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_Dungeon)entity)));
	}
}

public partial class DB_HeroStarUpgrade : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_HeroStarUpgrade(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_HeroStarUpgrade(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5622290902015236119UL,6401898085316914871UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String Hero
	{
		get => _Hero[Index];
		set => _Hero[Index] = value;
	}
	public System.Int32 Star
	{
		get => _Star[Index];
		set => _Star[Index] = value;
	}
	public System.Int32 Fragment
	{
		get => _Fragment[Index];
		set => _Fragment[Index] = value;
	}
	public System.Single HpBase
	{
		get => _HpBase[Index];
		set => _HpBase[Index] = value;
	}
	public System.Single DmgBase
	{
		get => _DmgBase[Index];
		set => _DmgBase[Index] = value;
	}
	public System.Single HpGrown
	{
		get => _HpGrown[Index];
		set => _HpGrown[Index] = value;
	}
	public System.Single DmgGrown
	{
		get => _DmgGrown[Index];
		set => _DmgGrown[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4874327924579825944UL, 17986874105511010487UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Hero;
	public static BansheeGz.BGDatabase.BGFieldString _Hero => _ufle12jhs77_Hero ?? (_ufle12jhs77_Hero = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4817418816236742233UL, 15373128321316169349UL), () => _ufle12jhs77_Hero = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Star;
	public static BansheeGz.BGDatabase.BGFieldInt _Star => _ufle12jhs77_Star ?? (_ufle12jhs77_Star = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5230860596981480835UL, 4219611559893294473UL), () => _ufle12jhs77_Star = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Fragment;
	public static BansheeGz.BGDatabase.BGFieldInt _Fragment => _ufle12jhs77_Fragment ?? (_ufle12jhs77_Fragment = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5011974796312125734UL, 13294437695380869002UL), () => _ufle12jhs77_Fragment = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_HpBase;
	public static BansheeGz.BGDatabase.BGFieldFloat _HpBase => _ufle12jhs77_HpBase ?? (_ufle12jhs77_HpBase = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5713763746468211887UL, 481706950539854261UL), () => _ufle12jhs77_HpBase = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_DmgBase;
	public static BansheeGz.BGDatabase.BGFieldFloat _DmgBase => _ufle12jhs77_DmgBase ?? (_ufle12jhs77_DmgBase = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5495091840889034921UL, 17243323000190902919UL), () => _ufle12jhs77_DmgBase = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_HpGrown;
	public static BansheeGz.BGDatabase.BGFieldFloat _HpGrown => _ufle12jhs77_HpGrown ?? (_ufle12jhs77_HpGrown = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5634724377765949950UL, 13618759391304508059UL), () => _ufle12jhs77_HpGrown = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_DmgGrown;
	public static BansheeGz.BGDatabase.BGFieldFloat _DmgGrown => _ufle12jhs77_DmgGrown ?? (_ufle12jhs77_DmgGrown = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5158045320868699878UL, 7130186680094186422UL), () => _ufle12jhs77_DmgGrown = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_HeroStarUpgrade() : base(MetaDefault)
	{
	}
	private DB_HeroStarUpgrade(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_HeroStarUpgrade(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_HeroStarUpgrade(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_HeroStarUpgrade FindEntity(Predicate<DB_HeroStarUpgrade> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_HeroStarUpgrade) entity)) as DB_HeroStarUpgrade;
	}
	public static List<DB_HeroStarUpgrade> FindEntities(Predicate<DB_HeroStarUpgrade> filter, List<DB_HeroStarUpgrade> result=null, Comparison<DB_HeroStarUpgrade> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_HeroStarUpgrade> action, Predicate<DB_HeroStarUpgrade> filter=null, Comparison<DB_HeroStarUpgrade> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_HeroStarUpgrade) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_HeroStarUpgrade) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_HeroStarUpgrade)e1,(DB_HeroStarUpgrade)e2));
	}
	public static DB_HeroStarUpgrade GetEntity(BGId entityId) => (DB_HeroStarUpgrade) MetaDefault.GetEntity(entityId);
	public static DB_HeroStarUpgrade GetEntity(int index) => (DB_HeroStarUpgrade) MetaDefault[index];
	public static DB_HeroStarUpgrade GetEntity(string entityName) => (DB_HeroStarUpgrade) MetaDefault.GetEntity(entityName);
	public static DB_HeroStarUpgrade NewEntity() => (DB_HeroStarUpgrade) MetaDefault.NewEntity();
	public static DB_HeroStarUpgrade NewEntity(BGId entityId) => (DB_HeroStarUpgrade) MetaDefault.NewEntity(entityId);
	public static DB_HeroStarUpgrade NewEntity(Action<DB_HeroStarUpgrade> callback)
	{
		return (DB_HeroStarUpgrade) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_HeroStarUpgrade)entity)));
	}
}

public partial class DB_EquipmentConfig : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_EquipmentConfig(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_EquipmentConfig(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4738521235680134390UL,3225757720802239384UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String ConfigName
	{
		get => _ConfigName[Index];
		set => _ConfigName[Index] = value;
	}
	public System.String ConfigValue
	{
		get => _ConfigValue[Index];
		set => _ConfigValue[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4697370715095726494UL, 9329531215683363752UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ConfigName;
	public static BansheeGz.BGDatabase.BGFieldString _ConfigName => _ufle12jhs77_ConfigName ?? (_ufle12jhs77_ConfigName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4991225673338222363UL, 17252297275527259566UL), () => _ufle12jhs77_ConfigName = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ConfigValue;
	public static BansheeGz.BGDatabase.BGFieldString _ConfigValue => _ufle12jhs77_ConfigValue ?? (_ufle12jhs77_ConfigValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5661556150759678313UL, 13070075515656824981UL), () => _ufle12jhs77_ConfigValue = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_EquipmentConfig() : base(MetaDefault)
	{
	}
	private DB_EquipmentConfig(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_EquipmentConfig(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_EquipmentConfig(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_EquipmentConfig FindEntity(Predicate<DB_EquipmentConfig> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_EquipmentConfig) entity)) as DB_EquipmentConfig;
	}
	public static List<DB_EquipmentConfig> FindEntities(Predicate<DB_EquipmentConfig> filter, List<DB_EquipmentConfig> result=null, Comparison<DB_EquipmentConfig> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_EquipmentConfig> action, Predicate<DB_EquipmentConfig> filter=null, Comparison<DB_EquipmentConfig> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_EquipmentConfig) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_EquipmentConfig) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_EquipmentConfig)e1,(DB_EquipmentConfig)e2));
	}
	public static DB_EquipmentConfig GetEntity(BGId entityId) => (DB_EquipmentConfig) MetaDefault.GetEntity(entityId);
	public static DB_EquipmentConfig GetEntity(int index) => (DB_EquipmentConfig) MetaDefault[index];
	public static DB_EquipmentConfig GetEntity(string entityName) => (DB_EquipmentConfig) MetaDefault.GetEntity(entityName);
	public static DB_EquipmentConfig NewEntity() => (DB_EquipmentConfig) MetaDefault.NewEntity();
	public static DB_EquipmentConfig NewEntity(BGId entityId) => (DB_EquipmentConfig) MetaDefault.NewEntity(entityId);
	public static DB_EquipmentConfig NewEntity(Action<DB_EquipmentConfig> callback)
	{
		return (DB_EquipmentConfig) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_EquipmentConfig)entity)));
	}
}

public partial class DB_BuffConfig : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_BuffConfig(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_BuffConfig(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5532102097153920223UL,14610829299844136336UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String ConfigName
	{
		get => _ConfigName[Index];
		set => _ConfigName[Index] = value;
	}
	public System.String ConfigValue
	{
		get => _ConfigValue[Index];
		set => _ConfigValue[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4723431901071700081UL, 9465987779471783600UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ConfigName;
	public static BansheeGz.BGDatabase.BGFieldString _ConfigName => _ufle12jhs77_ConfigName ?? (_ufle12jhs77_ConfigName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4960825035684544161UL, 4522987870680283555UL), () => _ufle12jhs77_ConfigName = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ConfigValue;
	public static BansheeGz.BGDatabase.BGFieldString _ConfigValue => _ufle12jhs77_ConfigValue ?? (_ufle12jhs77_ConfigValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4713955981472968553UL, 1352482376223758239UL), () => _ufle12jhs77_ConfigValue = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_BuffConfig() : base(MetaDefault)
	{
	}
	private DB_BuffConfig(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_BuffConfig(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_BuffConfig(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_BuffConfig FindEntity(Predicate<DB_BuffConfig> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_BuffConfig) entity)) as DB_BuffConfig;
	}
	public static List<DB_BuffConfig> FindEntities(Predicate<DB_BuffConfig> filter, List<DB_BuffConfig> result=null, Comparison<DB_BuffConfig> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_BuffConfig> action, Predicate<DB_BuffConfig> filter=null, Comparison<DB_BuffConfig> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_BuffConfig) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_BuffConfig) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_BuffConfig)e1,(DB_BuffConfig)e2));
	}
	public static DB_BuffConfig GetEntity(BGId entityId) => (DB_BuffConfig) MetaDefault.GetEntity(entityId);
	public static DB_BuffConfig GetEntity(int index) => (DB_BuffConfig) MetaDefault[index];
	public static DB_BuffConfig GetEntity(string entityName) => (DB_BuffConfig) MetaDefault.GetEntity(entityName);
	public static DB_BuffConfig NewEntity() => (DB_BuffConfig) MetaDefault.NewEntity();
	public static DB_BuffConfig NewEntity(BGId entityId) => (DB_BuffConfig) MetaDefault.NewEntity(entityId);
	public static DB_BuffConfig NewEntity(Action<DB_BuffConfig> callback)
	{
		return (DB_BuffConfig) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_BuffConfig)entity)));
	}
}

public partial class DB_HeroConfig : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_HeroConfig(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_HeroConfig(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5138278596834990818UL,12785424055672839857UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String ConfigName
	{
		get => _ConfigName[Index];
		set => _ConfigName[Index] = value;
	}
	public System.String ConfigValue
	{
		get => _ConfigValue[Index];
		set => _ConfigValue[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5063348697510569881UL, 8614507140544280195UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ConfigName;
	public static BansheeGz.BGDatabase.BGFieldString _ConfigName => _ufle12jhs77_ConfigName ?? (_ufle12jhs77_ConfigName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4825864329489823498UL, 779894188132543622UL), () => _ufle12jhs77_ConfigName = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ConfigValue;
	public static BansheeGz.BGDatabase.BGFieldString _ConfigValue => _ufle12jhs77_ConfigValue ?? (_ufle12jhs77_ConfigValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5042551570129379734UL, 5761448002286928799UL), () => _ufle12jhs77_ConfigValue = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_HeroConfig() : base(MetaDefault)
	{
	}
	private DB_HeroConfig(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_HeroConfig(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_HeroConfig(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_HeroConfig FindEntity(Predicate<DB_HeroConfig> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_HeroConfig) entity)) as DB_HeroConfig;
	}
	public static List<DB_HeroConfig> FindEntities(Predicate<DB_HeroConfig> filter, List<DB_HeroConfig> result=null, Comparison<DB_HeroConfig> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_HeroConfig> action, Predicate<DB_HeroConfig> filter=null, Comparison<DB_HeroConfig> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_HeroConfig) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_HeroConfig) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_HeroConfig)e1,(DB_HeroConfig)e2));
	}
	public static DB_HeroConfig GetEntity(BGId entityId) => (DB_HeroConfig) MetaDefault.GetEntity(entityId);
	public static DB_HeroConfig GetEntity(int index) => (DB_HeroConfig) MetaDefault[index];
	public static DB_HeroConfig GetEntity(string entityName) => (DB_HeroConfig) MetaDefault.GetEntity(entityName);
	public static DB_HeroConfig NewEntity() => (DB_HeroConfig) MetaDefault.NewEntity();
	public static DB_HeroConfig NewEntity(BGId entityId) => (DB_HeroConfig) MetaDefault.NewEntity(entityId);
	public static DB_HeroConfig NewEntity(Action<DB_HeroConfig> callback)
	{
		return (DB_HeroConfig) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_HeroConfig)entity)));
	}
}

public partial class DB_IapConfig : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_IapConfig(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_IapConfig(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5741645542088116021UL,4678240103518935698UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String Product
	{
		get => _Product[Index];
		set => _Product[Index] = value;
	}
	public System.String PurchaseType
	{
		get => _PurchaseType[Index];
		set => _PurchaseType[Index] = value;
	}
	public System.Single Price
	{
		get => _Price[Index];
		set => _Price[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5445171442888707329UL, 8229764575033110967UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Product;
	public static BansheeGz.BGDatabase.BGFieldString _Product => _ufle12jhs77_Product ?? (_ufle12jhs77_Product = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5227373111957022466UL, 13625786022010614694UL), () => _ufle12jhs77_Product = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_PurchaseType;
	public static BansheeGz.BGDatabase.BGFieldString _PurchaseType => _ufle12jhs77_PurchaseType ?? (_ufle12jhs77_PurchaseType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4681859565081510903UL, 9526572493414650290UL), () => _ufle12jhs77_PurchaseType = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_Price;
	public static BansheeGz.BGDatabase.BGFieldFloat _Price => _ufle12jhs77_Price ?? (_ufle12jhs77_Price = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4902820974463880331UL, 13685729628678875537UL), () => _ufle12jhs77_Price = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_IapConfig() : base(MetaDefault)
	{
	}
	private DB_IapConfig(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_IapConfig(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_IapConfig(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_IapConfig FindEntity(Predicate<DB_IapConfig> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_IapConfig) entity)) as DB_IapConfig;
	}
	public static List<DB_IapConfig> FindEntities(Predicate<DB_IapConfig> filter, List<DB_IapConfig> result=null, Comparison<DB_IapConfig> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_IapConfig> action, Predicate<DB_IapConfig> filter=null, Comparison<DB_IapConfig> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_IapConfig) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_IapConfig) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_IapConfig)e1,(DB_IapConfig)e2));
	}
	public static DB_IapConfig GetEntity(BGId entityId) => (DB_IapConfig) MetaDefault.GetEntity(entityId);
	public static DB_IapConfig GetEntity(int index) => (DB_IapConfig) MetaDefault[index];
	public static DB_IapConfig GetEntity(string entityName) => (DB_IapConfig) MetaDefault.GetEntity(entityName);
	public static DB_IapConfig NewEntity() => (DB_IapConfig) MetaDefault.NewEntity();
	public static DB_IapConfig NewEntity(BGId entityId) => (DB_IapConfig) MetaDefault.NewEntity(entityId);
	public static DB_IapConfig NewEntity(Action<DB_IapConfig> callback)
	{
		return (DB_IapConfig) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_IapConfig)entity)));
	}
}

public partial class DB_OfferDungeon : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_OfferDungeon(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_OfferDungeon(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5278202308571223513UL,6046997388154068661UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.Int32 DungeonId
	{
		get => _DungeonId[Index];
		set => _DungeonId[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Rewards
	{
		get => _Rewards[Index];
		set => _Rewards[Index] = value;
	}
	public System.Int32 XValue
	{
		get => _XValue[Index];
		set => _XValue[Index] = value;
	}
	public System.Int32 SaleOff
	{
		get => _SaleOff[Index];
		set => _SaleOff[Index] = value;
	}
	public System.Single Price
	{
		get => _Price[Index];
		set => _Price[Index] = value;
	}
	public System.String ProductId
	{
		get => _ProductId[Index];
		set => _ProductId[Index] = value;
	}
	public System.String FrameColor
	{
		get => _FrameColor[Index];
		set => _FrameColor[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5348310924067703560UL, 1051261399716200625UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5478496307161307584UL, 15812877299144828585UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_DungeonId;
	public static BansheeGz.BGDatabase.BGFieldInt _DungeonId => _ufle12jhs77_DungeonId ?? (_ufle12jhs77_DungeonId = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5557981454279993462UL, 55474356242773176UL), () => _ufle12jhs77_DungeonId = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Rewards;
	public static BansheeGz.BGDatabase.BGFieldListString _Rewards => _ufle12jhs77_Rewards ?? (_ufle12jhs77_Rewards = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5679606756408638427UL, 18118156519433205168UL), () => _ufle12jhs77_Rewards = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_XValue;
	public static BansheeGz.BGDatabase.BGFieldInt _XValue => _ufle12jhs77_XValue ?? (_ufle12jhs77_XValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5237347169609995299UL, 7835189610350747276UL), () => _ufle12jhs77_XValue = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_SaleOff;
	public static BansheeGz.BGDatabase.BGFieldInt _SaleOff => _ufle12jhs77_SaleOff ?? (_ufle12jhs77_SaleOff = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5322424266266694189UL, 8188263438179588251UL), () => _ufle12jhs77_SaleOff = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_Price;
	public static BansheeGz.BGDatabase.BGFieldFloat _Price => _ufle12jhs77_Price ?? (_ufle12jhs77_Price = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5183203179486342256UL, 16745216454395267485UL), () => _ufle12jhs77_Price = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ProductId;
	public static BansheeGz.BGDatabase.BGFieldString _ProductId => _ufle12jhs77_ProductId ?? (_ufle12jhs77_ProductId = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5757078557623570576UL, 4268107862484204174UL), () => _ufle12jhs77_ProductId = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_FrameColor;
	public static BansheeGz.BGDatabase.BGFieldString _FrameColor => _ufle12jhs77_FrameColor ?? (_ufle12jhs77_FrameColor = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5442056421127897994UL, 2598531396056318373UL), () => _ufle12jhs77_FrameColor = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_OfferDungeon() : base(MetaDefault)
	{
	}
	private DB_OfferDungeon(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_OfferDungeon(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_OfferDungeon(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_OfferDungeon FindEntity(Predicate<DB_OfferDungeon> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_OfferDungeon) entity)) as DB_OfferDungeon;
	}
	public static List<DB_OfferDungeon> FindEntities(Predicate<DB_OfferDungeon> filter, List<DB_OfferDungeon> result=null, Comparison<DB_OfferDungeon> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_OfferDungeon> action, Predicate<DB_OfferDungeon> filter=null, Comparison<DB_OfferDungeon> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_OfferDungeon) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_OfferDungeon) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_OfferDungeon)e1,(DB_OfferDungeon)e2));
	}
	public static DB_OfferDungeon GetEntity(BGId entityId) => (DB_OfferDungeon) MetaDefault.GetEntity(entityId);
	public static DB_OfferDungeon GetEntity(int index) => (DB_OfferDungeon) MetaDefault[index];
	public static DB_OfferDungeon GetEntity(string entityName) => (DB_OfferDungeon) MetaDefault.GetEntity(entityName);
	public static DB_OfferDungeon NewEntity() => (DB_OfferDungeon) MetaDefault.NewEntity();
	public static DB_OfferDungeon NewEntity(BGId entityId) => (DB_OfferDungeon) MetaDefault.NewEntity(entityId);
	public static DB_OfferDungeon NewEntity(Action<DB_OfferDungeon> callback)
	{
		return (DB_OfferDungeon) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_OfferDungeon)entity)));
	}
}

public partial class DB_Chest : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_Chest(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_Chest(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5363528024458376457UL,12762321195529742736UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String Chest
	{
		get => _Chest[Index];
		set => _Chest[Index] = value;
	}
	public System.Int32 RewardAdTime
	{
		get => _RewardAdTime[Index];
		set => _RewardAdTime[Index] = value;
	}
	public System.Int32 RewardAdMaxDay
	{
		get => _RewardAdMaxDay[Index];
		set => _RewardAdMaxDay[Index] = value;
	}
	public System.Int32 Gem
	{
		get => _Gem[Index];
		set => _Gem[Index] = value;
	}
	public System.String Key
	{
		get => _Key[Index];
		set => _Key[Index] = value;
	}
	public System.String RewardType
	{
		get => _RewardType[Index];
		set => _RewardType[Index] = value;
	}
	public System.String Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.String Rarity
	{
		get => _Rarity[Index];
		set => _Rarity[Index] = value;
	}
	public System.Int32 Min
	{
		get => _Min[Index];
		set => _Min[Index] = value;
	}
	public System.Int32 Max
	{
		get => _Max[Index];
		set => _Max[Index] = value;
	}
	public System.Single Weight
	{
		get => _Weight[Index];
		set => _Weight[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5029115106997670079UL, 11730760986739058103UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Chest;
	public static BansheeGz.BGDatabase.BGFieldString _Chest => _ufle12jhs77_Chest ?? (_ufle12jhs77_Chest = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5070088054174941776UL, 12600662366516327320UL), () => _ufle12jhs77_Chest = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_RewardAdTime;
	public static BansheeGz.BGDatabase.BGFieldInt _RewardAdTime => _ufle12jhs77_RewardAdTime ?? (_ufle12jhs77_RewardAdTime = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5662875154356435245UL, 14919304161686351493UL), () => _ufle12jhs77_RewardAdTime = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_RewardAdMaxDay;
	public static BansheeGz.BGDatabase.BGFieldInt _RewardAdMaxDay => _ufle12jhs77_RewardAdMaxDay ?? (_ufle12jhs77_RewardAdMaxDay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4808372591470037613UL, 3412458380574948263UL), () => _ufle12jhs77_RewardAdMaxDay = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Gem;
	public static BansheeGz.BGDatabase.BGFieldInt _Gem => _ufle12jhs77_Gem ?? (_ufle12jhs77_Gem = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5237118633397550098UL, 13168461169560591536UL), () => _ufle12jhs77_Gem = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Key;
	public static BansheeGz.BGDatabase.BGFieldString _Key => _ufle12jhs77_Key ?? (_ufle12jhs77_Key = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4982693736110148962UL, 2576290178051487620UL), () => _ufle12jhs77_Key = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_RewardType;
	public static BansheeGz.BGDatabase.BGFieldString _RewardType => _ufle12jhs77_RewardType ?? (_ufle12jhs77_RewardType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5160245542366424531UL, 6554369071094974107UL), () => _ufle12jhs77_RewardType = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldString _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5656434336246988074UL, 15333672976954966914UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Rarity;
	public static BansheeGz.BGDatabase.BGFieldString _Rarity => _ufle12jhs77_Rarity ?? (_ufle12jhs77_Rarity = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5015085909244797353UL, 12086663789433850019UL), () => _ufle12jhs77_Rarity = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Min;
	public static BansheeGz.BGDatabase.BGFieldInt _Min => _ufle12jhs77_Min ?? (_ufle12jhs77_Min = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4690796065424805269UL, 15449168155535425197UL), () => _ufle12jhs77_Min = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Max;
	public static BansheeGz.BGDatabase.BGFieldInt _Max => _ufle12jhs77_Max ?? (_ufle12jhs77_Max = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5708123581215978024UL, 15542058240719969436UL), () => _ufle12jhs77_Max = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_Weight;
	public static BansheeGz.BGDatabase.BGFieldFloat _Weight => _ufle12jhs77_Weight ?? (_ufle12jhs77_Weight = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4695817585711611276UL, 846094727064930181UL), () => _ufle12jhs77_Weight = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_Chest() : base(MetaDefault)
	{
	}
	private DB_Chest(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_Chest(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_Chest(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_Chest FindEntity(Predicate<DB_Chest> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_Chest) entity)) as DB_Chest;
	}
	public static List<DB_Chest> FindEntities(Predicate<DB_Chest> filter, List<DB_Chest> result=null, Comparison<DB_Chest> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_Chest> action, Predicate<DB_Chest> filter=null, Comparison<DB_Chest> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_Chest) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_Chest) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_Chest)e1,(DB_Chest)e2));
	}
	public static DB_Chest GetEntity(BGId entityId) => (DB_Chest) MetaDefault.GetEntity(entityId);
	public static DB_Chest GetEntity(int index) => (DB_Chest) MetaDefault[index];
	public static DB_Chest GetEntity(string entityName) => (DB_Chest) MetaDefault.GetEntity(entityName);
	public static DB_Chest NewEntity() => (DB_Chest) MetaDefault.NewEntity();
	public static DB_Chest NewEntity(BGId entityId) => (DB_Chest) MetaDefault.NewEntity(entityId);
	public static DB_Chest NewEntity(Action<DB_Chest> callback)
	{
		return (DB_Chest) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_Chest)entity)));
	}
}

public partial class DB_OfferGem : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_OfferGem(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_OfferGem(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5654177148903997091UL,5647938316484982710UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.Int32 Value
	{
		get => _Value[Index];
		set => _Value[Index] = value;
	}
	public System.Int32 FirstTime
	{
		get => _FirstTime[Index];
		set => _FirstTime[Index] = value;
	}
	public System.String ProductId
	{
		get => _ProductId[Index];
		set => _ProductId[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5446133243390259937UL, 13631565958851445937UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5483589427529900665UL, 4944771922202171025UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Value;
	public static BansheeGz.BGDatabase.BGFieldInt _Value => _ufle12jhs77_Value ?? (_ufle12jhs77_Value = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5349564168673171316UL, 14333419863423691667UL), () => _ufle12jhs77_Value = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_FirstTime;
	public static BansheeGz.BGDatabase.BGFieldInt _FirstTime => _ufle12jhs77_FirstTime ?? (_ufle12jhs77_FirstTime = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5403049229531202803UL, 3879385976903995268UL), () => _ufle12jhs77_FirstTime = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ProductId;
	public static BansheeGz.BGDatabase.BGFieldString _ProductId => _ufle12jhs77_ProductId ?? (_ufle12jhs77_ProductId = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5586753337772272824UL, 10097568758492223653UL), () => _ufle12jhs77_ProductId = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_OfferGem() : base(MetaDefault)
	{
	}
	private DB_OfferGem(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_OfferGem(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_OfferGem(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_OfferGem FindEntity(Predicate<DB_OfferGem> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_OfferGem) entity)) as DB_OfferGem;
	}
	public static List<DB_OfferGem> FindEntities(Predicate<DB_OfferGem> filter, List<DB_OfferGem> result=null, Comparison<DB_OfferGem> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_OfferGem> action, Predicate<DB_OfferGem> filter=null, Comparison<DB_OfferGem> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_OfferGem) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_OfferGem) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_OfferGem)e1,(DB_OfferGem)e2));
	}
	public static DB_OfferGem GetEntity(BGId entityId) => (DB_OfferGem) MetaDefault.GetEntity(entityId);
	public static DB_OfferGem GetEntity(int index) => (DB_OfferGem) MetaDefault[index];
	public static DB_OfferGem GetEntity(string entityName) => (DB_OfferGem) MetaDefault.GetEntity(entityName);
	public static DB_OfferGem NewEntity() => (DB_OfferGem) MetaDefault.NewEntity();
	public static DB_OfferGem NewEntity(BGId entityId) => (DB_OfferGem) MetaDefault.NewEntity(entityId);
	public static DB_OfferGem NewEntity(Action<DB_OfferGem> callback)
	{
		return (DB_OfferGem) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_OfferGem)entity)));
	}
}

public partial class DB_OfferGold : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_OfferGold(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_OfferGold(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4920396577632074959UL,17002646020819636117UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.Int32 Value
	{
		get => _Value[Index];
		set => _Value[Index] = value;
	}
	public System.Int32 FirstTime
	{
		get => _FirstTime[Index];
		set => _FirstTime[Index] = value;
	}
	public System.Int32 Cost
	{
		get => _Cost[Index];
		set => _Cost[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5694375575413130112UL, 17520152083248118932UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5626334490516140968UL, 11363911653961688993UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Value;
	public static BansheeGz.BGDatabase.BGFieldInt _Value => _ufle12jhs77_Value ?? (_ufle12jhs77_Value = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4804533707300180276UL, 12109245219187013293UL), () => _ufle12jhs77_Value = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_FirstTime;
	public static BansheeGz.BGDatabase.BGFieldInt _FirstTime => _ufle12jhs77_FirstTime ?? (_ufle12jhs77_FirstTime = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4721362168397021839UL, 7945339927319405979UL), () => _ufle12jhs77_FirstTime = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Cost;
	public static BansheeGz.BGDatabase.BGFieldInt _Cost => _ufle12jhs77_Cost ?? (_ufle12jhs77_Cost = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5521417489447601941UL, 13399887680949567123UL), () => _ufle12jhs77_Cost = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_OfferGold() : base(MetaDefault)
	{
	}
	private DB_OfferGold(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_OfferGold(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_OfferGold(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_OfferGold FindEntity(Predicate<DB_OfferGold> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_OfferGold) entity)) as DB_OfferGold;
	}
	public static List<DB_OfferGold> FindEntities(Predicate<DB_OfferGold> filter, List<DB_OfferGold> result=null, Comparison<DB_OfferGold> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_OfferGold> action, Predicate<DB_OfferGold> filter=null, Comparison<DB_OfferGold> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_OfferGold) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_OfferGold) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_OfferGold)e1,(DB_OfferGold)e2));
	}
	public static DB_OfferGold GetEntity(BGId entityId) => (DB_OfferGold) MetaDefault.GetEntity(entityId);
	public static DB_OfferGold GetEntity(int index) => (DB_OfferGold) MetaDefault[index];
	public static DB_OfferGold GetEntity(string entityName) => (DB_OfferGold) MetaDefault.GetEntity(entityName);
	public static DB_OfferGold NewEntity() => (DB_OfferGold) MetaDefault.NewEntity();
	public static DB_OfferGold NewEntity(BGId entityId) => (DB_OfferGold) MetaDefault.NewEntity(entityId);
	public static DB_OfferGold NewEntity(Action<DB_OfferGold> callback)
	{
		return (DB_OfferGold) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_OfferGold)entity)));
	}
}

public partial class DB_DungeonEventGoldRoom : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DungeonEventGoldRoom(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DungeonEventGoldRoom(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4995265195675182621UL,1171609579404098988UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Room
	{
		get => _Room[Index];
		set => _Room[Index] = value;
	}
	public System.Int32 Wave
	{
		get => _Wave[Index];
		set => _Wave[Index] = value;
	}
	public System.Single DelayToWave
	{
		get => _DelayToWave[Index];
		set => _DelayToWave[Index] = value;
	}
	public System.String Map
	{
		get => _Map[Index];
		set => _Map[Index] = value;
	}
	public System.String Enemy
	{
		get => _Enemy[Index];
		set => _Enemy[Index] = value;
	}
	public System.Int32 EnemyLevel
	{
		get => _EnemyLevel[Index];
		set => _EnemyLevel[Index] = value;
	}
	public System.String SpawnPoint
	{
		get => _SpawnPoint[Index];
		set => _SpawnPoint[Index] = value;
	}
	public System.Single Delay
	{
		get => _Delay[Index];
		set => _Delay[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	public System.Collections.Generic.List<System.String> DropRate
	{
		get => _DropRate[Index];
		set => _DropRate[Index] = value;
	}
	public System.String Difficult
	{
		get => _Difficult[Index];
		set => _Difficult[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5062319369766842490UL, 15547476810907455144UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Room;
	public static BansheeGz.BGDatabase.BGFieldInt _Room => _ufle12jhs77_Room ?? (_ufle12jhs77_Room = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5725171260207937167UL, 16408453412383948689UL), () => _ufle12jhs77_Room = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Wave;
	public static BansheeGz.BGDatabase.BGFieldInt _Wave => _ufle12jhs77_Wave ?? (_ufle12jhs77_Wave = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5470006366574461077UL, 12278383362314032278UL), () => _ufle12jhs77_Wave = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_DelayToWave;
	public static BansheeGz.BGDatabase.BGFieldFloat _DelayToWave => _ufle12jhs77_DelayToWave ?? (_ufle12jhs77_DelayToWave = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5345787110567599603UL, 13938847494619179681UL), () => _ufle12jhs77_DelayToWave = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Map;
	public static BansheeGz.BGDatabase.BGFieldString _Map => _ufle12jhs77_Map ?? (_ufle12jhs77_Map = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5410552289046902293UL, 9875454227020915608UL), () => _ufle12jhs77_Map = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Enemy;
	public static BansheeGz.BGDatabase.BGFieldString _Enemy => _ufle12jhs77_Enemy ?? (_ufle12jhs77_Enemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5621028066670164617UL, 10224220885553463216UL), () => _ufle12jhs77_Enemy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_EnemyLevel;
	public static BansheeGz.BGDatabase.BGFieldInt _EnemyLevel => _ufle12jhs77_EnemyLevel ?? (_ufle12jhs77_EnemyLevel = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5567008997743698820UL, 18379670707195902366UL), () => _ufle12jhs77_EnemyLevel = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_SpawnPoint;
	public static BansheeGz.BGDatabase.BGFieldString _SpawnPoint => _ufle12jhs77_SpawnPoint ?? (_ufle12jhs77_SpawnPoint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5459443075855548992UL, 11033182357185980823UL), () => _ufle12jhs77_SpawnPoint = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_Delay;
	public static BansheeGz.BGDatabase.BGFieldFloat _Delay => _ufle12jhs77_Delay ?? (_ufle12jhs77_Delay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4819384756168221382UL, 12979193828980496818UL), () => _ufle12jhs77_Delay = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldListString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5730540602727617619UL, 6121698269103876486UL), () => _ufle12jhs77_Reward = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_DropRate;
	public static BansheeGz.BGDatabase.BGFieldListString _DropRate => _ufle12jhs77_DropRate ?? (_ufle12jhs77_DropRate = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(4856905019828896256UL, 7067192016193359791UL), () => _ufle12jhs77_DropRate = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Difficult;
	public static BansheeGz.BGDatabase.BGFieldString _Difficult => _ufle12jhs77_Difficult ?? (_ufle12jhs77_Difficult = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5140113964671351393UL, 15121136443246653071UL), () => _ufle12jhs77_Difficult = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DungeonEventGoldRoom() : base(MetaDefault)
	{
	}
	private DB_DungeonEventGoldRoom(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DungeonEventGoldRoom(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DungeonEventGoldRoom(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DungeonEventGoldRoom FindEntity(Predicate<DB_DungeonEventGoldRoom> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DungeonEventGoldRoom) entity)) as DB_DungeonEventGoldRoom;
	}
	public static List<DB_DungeonEventGoldRoom> FindEntities(Predicate<DB_DungeonEventGoldRoom> filter, List<DB_DungeonEventGoldRoom> result=null, Comparison<DB_DungeonEventGoldRoom> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DungeonEventGoldRoom> action, Predicate<DB_DungeonEventGoldRoom> filter=null, Comparison<DB_DungeonEventGoldRoom> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DungeonEventGoldRoom) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DungeonEventGoldRoom) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DungeonEventGoldRoom)e1,(DB_DungeonEventGoldRoom)e2));
	}
	public static DB_DungeonEventGoldRoom GetEntity(BGId entityId) => (DB_DungeonEventGoldRoom) MetaDefault.GetEntity(entityId);
	public static DB_DungeonEventGoldRoom GetEntity(int index) => (DB_DungeonEventGoldRoom) MetaDefault[index];
	public static DB_DungeonEventGoldRoom GetEntity(string entityName) => (DB_DungeonEventGoldRoom) MetaDefault.GetEntity(entityName);
	public static DB_DungeonEventGoldRoom NewEntity() => (DB_DungeonEventGoldRoom) MetaDefault.NewEntity();
	public static DB_DungeonEventGoldRoom NewEntity(BGId entityId) => (DB_DungeonEventGoldRoom) MetaDefault.NewEntity(entityId);
	public static DB_DungeonEventGoldRoom NewEntity(Action<DB_DungeonEventGoldRoom> callback)
	{
		return (DB_DungeonEventGoldRoom) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DungeonEventGoldRoom)entity)));
	}
}

public partial class DB_DungeonEventScrollRoom : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DungeonEventScrollRoom(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DungeonEventScrollRoom(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4734973595966385636UL,17571173906598264238UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Room
	{
		get => _Room[Index];
		set => _Room[Index] = value;
	}
	public System.Int32 Wave
	{
		get => _Wave[Index];
		set => _Wave[Index] = value;
	}
	public System.Single DelayToWave
	{
		get => _DelayToWave[Index];
		set => _DelayToWave[Index] = value;
	}
	public System.String Map
	{
		get => _Map[Index];
		set => _Map[Index] = value;
	}
	public System.String Enemy
	{
		get => _Enemy[Index];
		set => _Enemy[Index] = value;
	}
	public System.Int32 EnemyLevel
	{
		get => _EnemyLevel[Index];
		set => _EnemyLevel[Index] = value;
	}
	public System.String SpawnPoint
	{
		get => _SpawnPoint[Index];
		set => _SpawnPoint[Index] = value;
	}
	public System.Single Delay
	{
		get => _Delay[Index];
		set => _Delay[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	public System.Collections.Generic.List<System.String> DropRate
	{
		get => _DropRate[Index];
		set => _DropRate[Index] = value;
	}
	public System.String Difficult
	{
		get => _Difficult[Index];
		set => _Difficult[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5396178859607725926UL, 6652021564771733389UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Room;
	public static BansheeGz.BGDatabase.BGFieldInt _Room => _ufle12jhs77_Room ?? (_ufle12jhs77_Room = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4669271588039447624UL, 10518913445353929106UL), () => _ufle12jhs77_Room = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Wave;
	public static BansheeGz.BGDatabase.BGFieldInt _Wave => _ufle12jhs77_Wave ?? (_ufle12jhs77_Wave = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5510457698433916523UL, 7148540415246656390UL), () => _ufle12jhs77_Wave = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_DelayToWave;
	public static BansheeGz.BGDatabase.BGFieldFloat _DelayToWave => _ufle12jhs77_DelayToWave ?? (_ufle12jhs77_DelayToWave = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5243224331613523380UL, 5353321741207049629UL), () => _ufle12jhs77_DelayToWave = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Map;
	public static BansheeGz.BGDatabase.BGFieldString _Map => _ufle12jhs77_Map ?? (_ufle12jhs77_Map = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5458418021187378297UL, 9699885752747567799UL), () => _ufle12jhs77_Map = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Enemy;
	public static BansheeGz.BGDatabase.BGFieldString _Enemy => _ufle12jhs77_Enemy ?? (_ufle12jhs77_Enemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5722515885894004793UL, 10290826353902668946UL), () => _ufle12jhs77_Enemy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_EnemyLevel;
	public static BansheeGz.BGDatabase.BGFieldInt _EnemyLevel => _ufle12jhs77_EnemyLevel ?? (_ufle12jhs77_EnemyLevel = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5527214387426795537UL, 16381157794593035941UL), () => _ufle12jhs77_EnemyLevel = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_SpawnPoint;
	public static BansheeGz.BGDatabase.BGFieldString _SpawnPoint => _ufle12jhs77_SpawnPoint ?? (_ufle12jhs77_SpawnPoint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4800593680780031069UL, 10088377253402572686UL), () => _ufle12jhs77_SpawnPoint = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_Delay;
	public static BansheeGz.BGDatabase.BGFieldFloat _Delay => _ufle12jhs77_Delay ?? (_ufle12jhs77_Delay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5112160939419705818UL, 518965637084994700UL), () => _ufle12jhs77_Delay = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldListString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(4789503493596683079UL, 16669817210744251532UL), () => _ufle12jhs77_Reward = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_DropRate;
	public static BansheeGz.BGDatabase.BGFieldListString _DropRate => _ufle12jhs77_DropRate ?? (_ufle12jhs77_DropRate = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5389820858431908524UL, 17580231362520564124UL), () => _ufle12jhs77_DropRate = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Difficult;
	public static BansheeGz.BGDatabase.BGFieldString _Difficult => _ufle12jhs77_Difficult ?? (_ufle12jhs77_Difficult = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5346725532207147132UL, 4272629507754864552UL), () => _ufle12jhs77_Difficult = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DungeonEventScrollRoom() : base(MetaDefault)
	{
	}
	private DB_DungeonEventScrollRoom(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DungeonEventScrollRoom(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DungeonEventScrollRoom(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DungeonEventScrollRoom FindEntity(Predicate<DB_DungeonEventScrollRoom> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DungeonEventScrollRoom) entity)) as DB_DungeonEventScrollRoom;
	}
	public static List<DB_DungeonEventScrollRoom> FindEntities(Predicate<DB_DungeonEventScrollRoom> filter, List<DB_DungeonEventScrollRoom> result=null, Comparison<DB_DungeonEventScrollRoom> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DungeonEventScrollRoom> action, Predicate<DB_DungeonEventScrollRoom> filter=null, Comparison<DB_DungeonEventScrollRoom> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DungeonEventScrollRoom) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DungeonEventScrollRoom) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DungeonEventScrollRoom)e1,(DB_DungeonEventScrollRoom)e2));
	}
	public static DB_DungeonEventScrollRoom GetEntity(BGId entityId) => (DB_DungeonEventScrollRoom) MetaDefault.GetEntity(entityId);
	public static DB_DungeonEventScrollRoom GetEntity(int index) => (DB_DungeonEventScrollRoom) MetaDefault[index];
	public static DB_DungeonEventScrollRoom GetEntity(string entityName) => (DB_DungeonEventScrollRoom) MetaDefault.GetEntity(entityName);
	public static DB_DungeonEventScrollRoom NewEntity() => (DB_DungeonEventScrollRoom) MetaDefault.NewEntity();
	public static DB_DungeonEventScrollRoom NewEntity(BGId entityId) => (DB_DungeonEventScrollRoom) MetaDefault.NewEntity(entityId);
	public static DB_DungeonEventScrollRoom NewEntity(Action<DB_DungeonEventScrollRoom> callback)
	{
		return (DB_DungeonEventScrollRoom) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DungeonEventScrollRoom)entity)));
	}
}

public partial class DB_DungeonEventStoneRoom : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DungeonEventStoneRoom(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DungeonEventStoneRoom(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4648393380340835538UL,3912778166055396017UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Room
	{
		get => _Room[Index];
		set => _Room[Index] = value;
	}
	public System.Int32 Wave
	{
		get => _Wave[Index];
		set => _Wave[Index] = value;
	}
	public System.Single DelayToWave
	{
		get => _DelayToWave[Index];
		set => _DelayToWave[Index] = value;
	}
	public System.String Map
	{
		get => _Map[Index];
		set => _Map[Index] = value;
	}
	public System.String Enemy
	{
		get => _Enemy[Index];
		set => _Enemy[Index] = value;
	}
	public System.Int32 EnemyLevel
	{
		get => _EnemyLevel[Index];
		set => _EnemyLevel[Index] = value;
	}
	public System.String SpawnPoint
	{
		get => _SpawnPoint[Index];
		set => _SpawnPoint[Index] = value;
	}
	public System.Single Delay
	{
		get => _Delay[Index];
		set => _Delay[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	public System.Collections.Generic.List<System.String> DropRate
	{
		get => _DropRate[Index];
		set => _DropRate[Index] = value;
	}
	public System.String Difficult
	{
		get => _Difficult[Index];
		set => _Difficult[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4921870141681547132UL, 2940577486910934930UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Room;
	public static BansheeGz.BGDatabase.BGFieldInt _Room => _ufle12jhs77_Room ?? (_ufle12jhs77_Room = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4991540021371514611UL, 16773423520613323662UL), () => _ufle12jhs77_Room = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Wave;
	public static BansheeGz.BGDatabase.BGFieldInt _Wave => _ufle12jhs77_Wave ?? (_ufle12jhs77_Wave = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4977930427820312087UL, 12224815794265013136UL), () => _ufle12jhs77_Wave = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_DelayToWave;
	public static BansheeGz.BGDatabase.BGFieldFloat _DelayToWave => _ufle12jhs77_DelayToWave ?? (_ufle12jhs77_DelayToWave = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5649991913306557411UL, 6800307655791666074UL), () => _ufle12jhs77_DelayToWave = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Map;
	public static BansheeGz.BGDatabase.BGFieldString _Map => _ufle12jhs77_Map ?? (_ufle12jhs77_Map = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5605565328771401542UL, 10437668149592311694UL), () => _ufle12jhs77_Map = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Enemy;
	public static BansheeGz.BGDatabase.BGFieldString _Enemy => _ufle12jhs77_Enemy ?? (_ufle12jhs77_Enemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5087224721722250746UL, 9437946164531207081UL), () => _ufle12jhs77_Enemy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_EnemyLevel;
	public static BansheeGz.BGDatabase.BGFieldInt _EnemyLevel => _ufle12jhs77_EnemyLevel ?? (_ufle12jhs77_EnemyLevel = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5468658542026130297UL, 3253154993377677497UL), () => _ufle12jhs77_EnemyLevel = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_SpawnPoint;
	public static BansheeGz.BGDatabase.BGFieldString _SpawnPoint => _ufle12jhs77_SpawnPoint ?? (_ufle12jhs77_SpawnPoint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5595487314930461041UL, 5252186801344764600UL), () => _ufle12jhs77_SpawnPoint = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_Delay;
	public static BansheeGz.BGDatabase.BGFieldFloat _Delay => _ufle12jhs77_Delay ?? (_ufle12jhs77_Delay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5432981963765859604UL, 15382582233094214544UL), () => _ufle12jhs77_Delay = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldListString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5702958206894914017UL, 5127978761891950739UL), () => _ufle12jhs77_Reward = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_DropRate;
	public static BansheeGz.BGDatabase.BGFieldListString _DropRate => _ufle12jhs77_DropRate ?? (_ufle12jhs77_DropRate = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5117061585167944668UL, 15324273725942799033UL), () => _ufle12jhs77_DropRate = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Difficult;
	public static BansheeGz.BGDatabase.BGFieldString _Difficult => _ufle12jhs77_Difficult ?? (_ufle12jhs77_Difficult = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5163980213158471552UL, 17891982084721092225UL), () => _ufle12jhs77_Difficult = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DungeonEventStoneRoom() : base(MetaDefault)
	{
	}
	private DB_DungeonEventStoneRoom(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DungeonEventStoneRoom(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DungeonEventStoneRoom(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DungeonEventStoneRoom FindEntity(Predicate<DB_DungeonEventStoneRoom> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DungeonEventStoneRoom) entity)) as DB_DungeonEventStoneRoom;
	}
	public static List<DB_DungeonEventStoneRoom> FindEntities(Predicate<DB_DungeonEventStoneRoom> filter, List<DB_DungeonEventStoneRoom> result=null, Comparison<DB_DungeonEventStoneRoom> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DungeonEventStoneRoom> action, Predicate<DB_DungeonEventStoneRoom> filter=null, Comparison<DB_DungeonEventStoneRoom> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DungeonEventStoneRoom) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DungeonEventStoneRoom) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DungeonEventStoneRoom)e1,(DB_DungeonEventStoneRoom)e2));
	}
	public static DB_DungeonEventStoneRoom GetEntity(BGId entityId) => (DB_DungeonEventStoneRoom) MetaDefault.GetEntity(entityId);
	public static DB_DungeonEventStoneRoom GetEntity(int index) => (DB_DungeonEventStoneRoom) MetaDefault[index];
	public static DB_DungeonEventStoneRoom GetEntity(string entityName) => (DB_DungeonEventStoneRoom) MetaDefault.GetEntity(entityName);
	public static DB_DungeonEventStoneRoom NewEntity() => (DB_DungeonEventStoneRoom) MetaDefault.NewEntity();
	public static DB_DungeonEventStoneRoom NewEntity(BGId entityId) => (DB_DungeonEventStoneRoom) MetaDefault.NewEntity(entityId);
	public static DB_DungeonEventStoneRoom NewEntity(Action<DB_DungeonEventStoneRoom> callback)
	{
		return (DB_DungeonEventStoneRoom) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DungeonEventStoneRoom)entity)));
	}
}

public partial class DB_DungeonEventGold : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DungeonEventGold(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DungeonEventGold(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4978095700877309658UL,737506320724432315UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Dungeon
	{
		get => _Dungeon[Index];
		set => _Dungeon[Index] = value;
	}
	public System.String Stages
	{
		get => _Stages[Index];
		set => _Stages[Index] = value;
	}
	public System.Int32 Buff
	{
		get => _Buff[Index];
		set => _Buff[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5273093188252004395UL, 10695000482419389072UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Dungeon;
	public static BansheeGz.BGDatabase.BGFieldInt _Dungeon => _ufle12jhs77_Dungeon ?? (_ufle12jhs77_Dungeon = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5661797933876921741UL, 11011232545360975745UL), () => _ufle12jhs77_Dungeon = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Stages;
	public static BansheeGz.BGDatabase.BGFieldString _Stages => _ufle12jhs77_Stages ?? (_ufle12jhs77_Stages = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4989783965971865838UL, 7935472800365833146UL), () => _ufle12jhs77_Stages = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Buff;
	public static BansheeGz.BGDatabase.BGFieldInt _Buff => _ufle12jhs77_Buff ?? (_ufle12jhs77_Buff = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5120913769036742801UL, 18403088745950413758UL), () => _ufle12jhs77_Buff = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldListString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5314642243657700356UL, 14238855309935922821UL), () => _ufle12jhs77_Reward = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DungeonEventGold() : base(MetaDefault)
	{
	}
	private DB_DungeonEventGold(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DungeonEventGold(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DungeonEventGold(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DungeonEventGold FindEntity(Predicate<DB_DungeonEventGold> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DungeonEventGold) entity)) as DB_DungeonEventGold;
	}
	public static List<DB_DungeonEventGold> FindEntities(Predicate<DB_DungeonEventGold> filter, List<DB_DungeonEventGold> result=null, Comparison<DB_DungeonEventGold> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DungeonEventGold> action, Predicate<DB_DungeonEventGold> filter=null, Comparison<DB_DungeonEventGold> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DungeonEventGold) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DungeonEventGold) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DungeonEventGold)e1,(DB_DungeonEventGold)e2));
	}
	public static DB_DungeonEventGold GetEntity(BGId entityId) => (DB_DungeonEventGold) MetaDefault.GetEntity(entityId);
	public static DB_DungeonEventGold GetEntity(int index) => (DB_DungeonEventGold) MetaDefault[index];
	public static DB_DungeonEventGold GetEntity(string entityName) => (DB_DungeonEventGold) MetaDefault.GetEntity(entityName);
	public static DB_DungeonEventGold NewEntity() => (DB_DungeonEventGold) MetaDefault.NewEntity();
	public static DB_DungeonEventGold NewEntity(BGId entityId) => (DB_DungeonEventGold) MetaDefault.NewEntity(entityId);
	public static DB_DungeonEventGold NewEntity(Action<DB_DungeonEventGold> callback)
	{
		return (DB_DungeonEventGold) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DungeonEventGold)entity)));
	}
}

public partial class DB_DungeonEventScroll : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DungeonEventScroll(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DungeonEventScroll(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5190695149275509029UL,13715370292566193831UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Dungeon
	{
		get => _Dungeon[Index];
		set => _Dungeon[Index] = value;
	}
	public System.String Stages
	{
		get => _Stages[Index];
		set => _Stages[Index] = value;
	}
	public System.Int32 Buff
	{
		get => _Buff[Index];
		set => _Buff[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4659008345141213985UL, 17562767613321837247UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Dungeon;
	public static BansheeGz.BGDatabase.BGFieldInt _Dungeon => _ufle12jhs77_Dungeon ?? (_ufle12jhs77_Dungeon = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4722960151655739596UL, 2444089022368746918UL), () => _ufle12jhs77_Dungeon = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Stages;
	public static BansheeGz.BGDatabase.BGFieldString _Stages => _ufle12jhs77_Stages ?? (_ufle12jhs77_Stages = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5420197750504919330UL, 10927318773299691396UL), () => _ufle12jhs77_Stages = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Buff;
	public static BansheeGz.BGDatabase.BGFieldInt _Buff => _ufle12jhs77_Buff ?? (_ufle12jhs77_Buff = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5446157941419708105UL, 10289401737391278765UL), () => _ufle12jhs77_Buff = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldListString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5553458997796494311UL, 2651011029493392042UL), () => _ufle12jhs77_Reward = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DungeonEventScroll() : base(MetaDefault)
	{
	}
	private DB_DungeonEventScroll(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DungeonEventScroll(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DungeonEventScroll(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DungeonEventScroll FindEntity(Predicate<DB_DungeonEventScroll> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DungeonEventScroll) entity)) as DB_DungeonEventScroll;
	}
	public static List<DB_DungeonEventScroll> FindEntities(Predicate<DB_DungeonEventScroll> filter, List<DB_DungeonEventScroll> result=null, Comparison<DB_DungeonEventScroll> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DungeonEventScroll> action, Predicate<DB_DungeonEventScroll> filter=null, Comparison<DB_DungeonEventScroll> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DungeonEventScroll) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DungeonEventScroll) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DungeonEventScroll)e1,(DB_DungeonEventScroll)e2));
	}
	public static DB_DungeonEventScroll GetEntity(BGId entityId) => (DB_DungeonEventScroll) MetaDefault.GetEntity(entityId);
	public static DB_DungeonEventScroll GetEntity(int index) => (DB_DungeonEventScroll) MetaDefault[index];
	public static DB_DungeonEventScroll GetEntity(string entityName) => (DB_DungeonEventScroll) MetaDefault.GetEntity(entityName);
	public static DB_DungeonEventScroll NewEntity() => (DB_DungeonEventScroll) MetaDefault.NewEntity();
	public static DB_DungeonEventScroll NewEntity(BGId entityId) => (DB_DungeonEventScroll) MetaDefault.NewEntity(entityId);
	public static DB_DungeonEventScroll NewEntity(Action<DB_DungeonEventScroll> callback)
	{
		return (DB_DungeonEventScroll) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DungeonEventScroll)entity)));
	}
}

public partial class DB_DungeonEventStone : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DungeonEventStone(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DungeonEventStone(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5444463559066980300UL,7257007166722446761UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Dungeon
	{
		get => _Dungeon[Index];
		set => _Dungeon[Index] = value;
	}
	public System.String Stages
	{
		get => _Stages[Index];
		set => _Stages[Index] = value;
	}
	public System.Int32 Buff
	{
		get => _Buff[Index];
		set => _Buff[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4869865397020424331UL, 10253768370639110036UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Dungeon;
	public static BansheeGz.BGDatabase.BGFieldInt _Dungeon => _ufle12jhs77_Dungeon ?? (_ufle12jhs77_Dungeon = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4753008015638954184UL, 18116952212619559836UL), () => _ufle12jhs77_Dungeon = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Stages;
	public static BansheeGz.BGDatabase.BGFieldString _Stages => _ufle12jhs77_Stages ?? (_ufle12jhs77_Stages = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5634103281492526204UL, 4824832897832705928UL), () => _ufle12jhs77_Stages = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Buff;
	public static BansheeGz.BGDatabase.BGFieldInt _Buff => _ufle12jhs77_Buff ?? (_ufle12jhs77_Buff = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5667256165544736059UL, 16474799899916380580UL), () => _ufle12jhs77_Buff = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldListString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5442699001293443668UL, 5768840874745178252UL), () => _ufle12jhs77_Reward = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DungeonEventStone() : base(MetaDefault)
	{
	}
	private DB_DungeonEventStone(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DungeonEventStone(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DungeonEventStone(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DungeonEventStone FindEntity(Predicate<DB_DungeonEventStone> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DungeonEventStone) entity)) as DB_DungeonEventStone;
	}
	public static List<DB_DungeonEventStone> FindEntities(Predicate<DB_DungeonEventStone> filter, List<DB_DungeonEventStone> result=null, Comparison<DB_DungeonEventStone> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DungeonEventStone> action, Predicate<DB_DungeonEventStone> filter=null, Comparison<DB_DungeonEventStone> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DungeonEventStone) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DungeonEventStone) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DungeonEventStone)e1,(DB_DungeonEventStone)e2));
	}
	public static DB_DungeonEventStone GetEntity(BGId entityId) => (DB_DungeonEventStone) MetaDefault.GetEntity(entityId);
	public static DB_DungeonEventStone GetEntity(int index) => (DB_DungeonEventStone) MetaDefault[index];
	public static DB_DungeonEventStone GetEntity(string entityName) => (DB_DungeonEventStone) MetaDefault.GetEntity(entityName);
	public static DB_DungeonEventStone NewEntity() => (DB_DungeonEventStone) MetaDefault.NewEntity();
	public static DB_DungeonEventStone NewEntity(BGId entityId) => (DB_DungeonEventStone) MetaDefault.NewEntity(entityId);
	public static DB_DungeonEventStone NewEntity(Action<DB_DungeonEventStone> callback)
	{
		return (DB_DungeonEventStone) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DungeonEventStone)entity)));
	}
}

public partial class DB_DungeonEventConfig : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DungeonEventConfig(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DungeonEventConfig(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5448010203053026692UL,13502953009173446554UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String Event
	{
		get => _Event[Index];
		set => _Event[Index] = value;
	}
	public System.Int32 MaxAdInDay
	{
		get => _MaxAdInDay[Index];
		set => _MaxAdInDay[Index] = value;
	}
	public System.Int32 Energy
	{
		get => _Energy[Index];
		set => _Energy[Index] = value;
	}
	public System.Int32 Active
	{
		get => _Active[Index];
		set => _Active[Index] = value;
	}
	public System.Int32 Base
	{
		get => _Base[Index];
		set => _Base[Index] = value;
	}
	public System.Single Increase
	{
		get => _Increase[Index];
		set => _Increase[Index] = value;
	}
	public System.String Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	public System.Int32 FreePlay
	{
		get => _FreePlay[Index];
		set => _FreePlay[Index] = value;
	}
	public System.Single EnemyLevel
	{
		get => _EnemyLevel[Index];
		set => _EnemyLevel[Index] = value;
	}
	public System.Int32 Dungeon
	{
		get => _Dungeon[Index];
		set => _Dungeon[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4998413740820618963UL, 6833278923337344916UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Event;
	public static BansheeGz.BGDatabase.BGFieldString _Event => _ufle12jhs77_Event ?? (_ufle12jhs77_Event = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5396893637519820413UL, 15725888488026386594UL), () => _ufle12jhs77_Event = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_MaxAdInDay;
	public static BansheeGz.BGDatabase.BGFieldInt _MaxAdInDay => _ufle12jhs77_MaxAdInDay ?? (_ufle12jhs77_MaxAdInDay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4986537852705055733UL, 1534728432040068010UL), () => _ufle12jhs77_MaxAdInDay = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Energy;
	public static BansheeGz.BGDatabase.BGFieldInt _Energy => _ufle12jhs77_Energy ?? (_ufle12jhs77_Energy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4880399882281696000UL, 9250854669192975001UL), () => _ufle12jhs77_Energy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Active;
	public static BansheeGz.BGDatabase.BGFieldInt _Active => _ufle12jhs77_Active ?? (_ufle12jhs77_Active = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5534594915982487741UL, 4909429730143566998UL), () => _ufle12jhs77_Active = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Base;
	public static BansheeGz.BGDatabase.BGFieldInt _Base => _ufle12jhs77_Base ?? (_ufle12jhs77_Base = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4995715479373521882UL, 12175276154577363094UL), () => _ufle12jhs77_Base = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_Increase;
	public static BansheeGz.BGDatabase.BGFieldFloat _Increase => _ufle12jhs77_Increase ?? (_ufle12jhs77_Increase = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5514389168852277996UL, 1129636678657042307UL), () => _ufle12jhs77_Increase = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4698143554771727569UL, 18022285957419299993UL), () => _ufle12jhs77_Reward = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_FreePlay;
	public static BansheeGz.BGDatabase.BGFieldInt _FreePlay => _ufle12jhs77_FreePlay ?? (_ufle12jhs77_FreePlay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5119436542140292946UL, 6742205588893570492UL), () => _ufle12jhs77_FreePlay = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_EnemyLevel;
	public static BansheeGz.BGDatabase.BGFieldFloat _EnemyLevel => _ufle12jhs77_EnemyLevel ?? (_ufle12jhs77_EnemyLevel = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4731722775724426355UL, 14980012900991495857UL), () => _ufle12jhs77_EnemyLevel = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Dungeon;
	public static BansheeGz.BGDatabase.BGFieldInt _Dungeon => _ufle12jhs77_Dungeon ?? (_ufle12jhs77_Dungeon = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5484018208185834433UL, 1431633739264389532UL), () => _ufle12jhs77_Dungeon = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DungeonEventConfig() : base(MetaDefault)
	{
	}
	private DB_DungeonEventConfig(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DungeonEventConfig(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DungeonEventConfig(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DungeonEventConfig FindEntity(Predicate<DB_DungeonEventConfig> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DungeonEventConfig) entity)) as DB_DungeonEventConfig;
	}
	public static List<DB_DungeonEventConfig> FindEntities(Predicate<DB_DungeonEventConfig> filter, List<DB_DungeonEventConfig> result=null, Comparison<DB_DungeonEventConfig> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DungeonEventConfig> action, Predicate<DB_DungeonEventConfig> filter=null, Comparison<DB_DungeonEventConfig> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DungeonEventConfig) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DungeonEventConfig) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DungeonEventConfig)e1,(DB_DungeonEventConfig)e2));
	}
	public static DB_DungeonEventConfig GetEntity(BGId entityId) => (DB_DungeonEventConfig) MetaDefault.GetEntity(entityId);
	public static DB_DungeonEventConfig GetEntity(int index) => (DB_DungeonEventConfig) MetaDefault[index];
	public static DB_DungeonEventConfig GetEntity(string entityName) => (DB_DungeonEventConfig) MetaDefault.GetEntity(entityName);
	public static DB_DungeonEventConfig NewEntity() => (DB_DungeonEventConfig) MetaDefault.NewEntity();
	public static DB_DungeonEventConfig NewEntity(BGId entityId) => (DB_DungeonEventConfig) MetaDefault.NewEntity(entityId);
	public static DB_DungeonEventConfig NewEntity(Action<DB_DungeonEventConfig> callback)
	{
		return (DB_DungeonEventConfig) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DungeonEventConfig)entity)));
	}
}

public partial class DB_DungeonEventStage : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DungeonEventStage(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DungeonEventStage(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5574073037908277500UL,13353510916258624930UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String Stage
	{
		get => _Stage[Index];
		set => _Stage[Index] = value;
	}
	public System.Collections.Generic.List<System.Int32> Room
	{
		get => _Room[Index];
		set => _Room[Index] = value;
	}
	public System.Int32 EnemyLevel
	{
		get => _EnemyLevel[Index];
		set => _EnemyLevel[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5692647598906561050UL, 15013064823953905030UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Stage;
	public static BansheeGz.BGDatabase.BGFieldString _Stage => _ufle12jhs77_Stage ?? (_ufle12jhs77_Stage = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5382090721536176423UL, 3784510719403340455UL), () => _ufle12jhs77_Stage = null));
	private static BansheeGz.BGDatabase.BGFieldListInt _ufle12jhs77_Room;
	public static BansheeGz.BGDatabase.BGFieldListInt _Room => _ufle12jhs77_Room ?? (_ufle12jhs77_Room = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListInt>(MetaDefault, new BGId(5216571654352329214UL, 11613381619880581270UL), () => _ufle12jhs77_Room = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_EnemyLevel;
	public static BansheeGz.BGDatabase.BGFieldInt _EnemyLevel => _ufle12jhs77_EnemyLevel ?? (_ufle12jhs77_EnemyLevel = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5105134496510977682UL, 17365107915838475408UL), () => _ufle12jhs77_EnemyLevel = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DungeonEventStage() : base(MetaDefault)
	{
	}
	private DB_DungeonEventStage(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DungeonEventStage(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DungeonEventStage(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DungeonEventStage FindEntity(Predicate<DB_DungeonEventStage> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DungeonEventStage) entity)) as DB_DungeonEventStage;
	}
	public static List<DB_DungeonEventStage> FindEntities(Predicate<DB_DungeonEventStage> filter, List<DB_DungeonEventStage> result=null, Comparison<DB_DungeonEventStage> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DungeonEventStage> action, Predicate<DB_DungeonEventStage> filter=null, Comparison<DB_DungeonEventStage> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DungeonEventStage) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DungeonEventStage) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DungeonEventStage)e1,(DB_DungeonEventStage)e2));
	}
	public static DB_DungeonEventStage GetEntity(BGId entityId) => (DB_DungeonEventStage) MetaDefault.GetEntity(entityId);
	public static DB_DungeonEventStage GetEntity(int index) => (DB_DungeonEventStage) MetaDefault[index];
	public static DB_DungeonEventStage GetEntity(string entityName) => (DB_DungeonEventStage) MetaDefault.GetEntity(entityName);
	public static DB_DungeonEventStage NewEntity() => (DB_DungeonEventStage) MetaDefault.NewEntity();
	public static DB_DungeonEventStage NewEntity(BGId entityId) => (DB_DungeonEventStage) MetaDefault.NewEntity(entityId);
	public static DB_DungeonEventStage NewEntity(Action<DB_DungeonEventStage> callback)
	{
		return (DB_DungeonEventStage) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DungeonEventStage)entity)));
	}
}

public partial class DB_DailyQuest : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DailyQuest(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DailyQuest(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4688267237262617195UL,6077841266247058876UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.String Type
	{
		get => _Type[Index];
		set => _Type[Index] = value;
	}
	public System.Int32 Target
	{
		get => _Target[Index];
		set => _Target[Index] = value;
	}
	public System.String Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	public System.Int32 Score
	{
		get => _Score[Index];
		set => _Score[Index] = value;
	}
	public System.String Claim
	{
		get => _Claim[Index];
		set => _Claim[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5169805589538003206UL, 9963073233037614756UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4789406965662251113UL, 13394124011853962889UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Type;
	public static BansheeGz.BGDatabase.BGFieldString _Type => _ufle12jhs77_Type ?? (_ufle12jhs77_Type = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5268913659554500135UL, 11464107800386594455UL), () => _ufle12jhs77_Type = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Target;
	public static BansheeGz.BGDatabase.BGFieldInt _Target => _ufle12jhs77_Target ?? (_ufle12jhs77_Target = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5513934839446966177UL, 6646019038157914557UL), () => _ufle12jhs77_Target = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5334629297572251494UL, 9474571346697193908UL), () => _ufle12jhs77_Reward = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Score;
	public static BansheeGz.BGDatabase.BGFieldInt _Score => _ufle12jhs77_Score ?? (_ufle12jhs77_Score = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5751304907468306411UL, 18198087869560994970UL), () => _ufle12jhs77_Score = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Claim;
	public static BansheeGz.BGDatabase.BGFieldString _Claim => _ufle12jhs77_Claim ?? (_ufle12jhs77_Claim = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5296523597110824221UL, 11115033315676226478UL), () => _ufle12jhs77_Claim = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DailyQuest() : base(MetaDefault)
	{
	}
	private DB_DailyQuest(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DailyQuest(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DailyQuest(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DailyQuest FindEntity(Predicate<DB_DailyQuest> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DailyQuest) entity)) as DB_DailyQuest;
	}
	public static List<DB_DailyQuest> FindEntities(Predicate<DB_DailyQuest> filter, List<DB_DailyQuest> result=null, Comparison<DB_DailyQuest> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DailyQuest> action, Predicate<DB_DailyQuest> filter=null, Comparison<DB_DailyQuest> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DailyQuest) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DailyQuest) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DailyQuest)e1,(DB_DailyQuest)e2));
	}
	public static DB_DailyQuest GetEntity(BGId entityId) => (DB_DailyQuest) MetaDefault.GetEntity(entityId);
	public static DB_DailyQuest GetEntity(int index) => (DB_DailyQuest) MetaDefault[index];
	public static DB_DailyQuest GetEntity(string entityName) => (DB_DailyQuest) MetaDefault.GetEntity(entityName);
	public static DB_DailyQuest NewEntity() => (DB_DailyQuest) MetaDefault.NewEntity();
	public static DB_DailyQuest NewEntity(BGId entityId) => (DB_DailyQuest) MetaDefault.NewEntity(entityId);
	public static DB_DailyQuest NewEntity(Action<DB_DailyQuest> callback)
	{
		return (DB_DailyQuest) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DailyQuest)entity)));
	}
}

public partial class DB_DailyQuestProgress : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DailyQuestProgress(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DailyQuestProgress(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5690010029098746701UL,1652451169174891682UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.Int32 Milestone
	{
		get => _Milestone[Index];
		set => _Milestone[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	public System.Int32 IsSpecial
	{
		get => _IsSpecial[Index];
		set => _IsSpecial[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4951374536535354024UL, 16468850569470774162UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4814816170214808385UL, 15573531009973722297UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Milestone;
	public static BansheeGz.BGDatabase.BGFieldInt _Milestone => _ufle12jhs77_Milestone ?? (_ufle12jhs77_Milestone = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5623538345427434936UL, 3583939519553372079UL), () => _ufle12jhs77_Milestone = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldListString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(4632650514132532592UL, 15705779872792508595UL), () => _ufle12jhs77_Reward = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_IsSpecial;
	public static BansheeGz.BGDatabase.BGFieldInt _IsSpecial => _ufle12jhs77_IsSpecial ?? (_ufle12jhs77_IsSpecial = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5366826548850230173UL, 2688591777222228362UL), () => _ufle12jhs77_IsSpecial = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DailyQuestProgress() : base(MetaDefault)
	{
	}
	private DB_DailyQuestProgress(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DailyQuestProgress(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DailyQuestProgress(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DailyQuestProgress FindEntity(Predicate<DB_DailyQuestProgress> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DailyQuestProgress) entity)) as DB_DailyQuestProgress;
	}
	public static List<DB_DailyQuestProgress> FindEntities(Predicate<DB_DailyQuestProgress> filter, List<DB_DailyQuestProgress> result=null, Comparison<DB_DailyQuestProgress> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DailyQuestProgress> action, Predicate<DB_DailyQuestProgress> filter=null, Comparison<DB_DailyQuestProgress> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DailyQuestProgress) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DailyQuestProgress) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DailyQuestProgress)e1,(DB_DailyQuestProgress)e2));
	}
	public static DB_DailyQuestProgress GetEntity(BGId entityId) => (DB_DailyQuestProgress) MetaDefault.GetEntity(entityId);
	public static DB_DailyQuestProgress GetEntity(int index) => (DB_DailyQuestProgress) MetaDefault[index];
	public static DB_DailyQuestProgress GetEntity(string entityName) => (DB_DailyQuestProgress) MetaDefault.GetEntity(entityName);
	public static DB_DailyQuestProgress NewEntity() => (DB_DailyQuestProgress) MetaDefault.NewEntity();
	public static DB_DailyQuestProgress NewEntity(BGId entityId) => (DB_DailyQuestProgress) MetaDefault.NewEntity(entityId);
	public static DB_DailyQuestProgress NewEntity(Action<DB_DailyQuestProgress> callback)
	{
		return (DB_DailyQuestProgress) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DailyQuestProgress)entity)));
	}
}

public partial class DB_Achievement : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_Achievement(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_Achievement(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4763561898336717854UL,13113579494520691613UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String Type
	{
		get => _Type[Index];
		set => _Type[Index] = value;
	}
	public System.Int32 Index
	{
		get => _Index[Index];
		set => _Index[Index] = value;
	}
	public System.Int32 Target
	{
		get => _Target[Index];
		set => _Target[Index] = value;
	}
	public System.String Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5220835171684666111UL, 776245717819533441UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Type;
	public static BansheeGz.BGDatabase.BGFieldString _Type => _ufle12jhs77_Type ?? (_ufle12jhs77_Type = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4654414347264125488UL, 11989745278737922215UL), () => _ufle12jhs77_Type = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Index;
	public static BansheeGz.BGDatabase.BGFieldInt _Index => _ufle12jhs77_Index ?? (_ufle12jhs77_Index = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5636776770727377255UL, 715256065859479695UL), () => _ufle12jhs77_Index = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Target;
	public static BansheeGz.BGDatabase.BGFieldInt _Target => _ufle12jhs77_Target ?? (_ufle12jhs77_Target = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4833020918158340049UL, 15454075336058437800UL), () => _ufle12jhs77_Target = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5714554646288088913UL, 1999629635418125197UL), () => _ufle12jhs77_Reward = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_Achievement() : base(MetaDefault)
	{
	}
	private DB_Achievement(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_Achievement(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_Achievement(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_Achievement FindEntity(Predicate<DB_Achievement> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_Achievement) entity)) as DB_Achievement;
	}
	public static List<DB_Achievement> FindEntities(Predicate<DB_Achievement> filter, List<DB_Achievement> result=null, Comparison<DB_Achievement> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_Achievement> action, Predicate<DB_Achievement> filter=null, Comparison<DB_Achievement> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_Achievement) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_Achievement) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_Achievement)e1,(DB_Achievement)e2));
	}
	public static DB_Achievement GetEntity(BGId entityId) => (DB_Achievement) MetaDefault.GetEntity(entityId);
	public static DB_Achievement GetEntity(int index) => (DB_Achievement) MetaDefault[index];
	public static DB_Achievement GetEntity(string entityName) => (DB_Achievement) MetaDefault.GetEntity(entityName);
	public static DB_Achievement NewEntity() => (DB_Achievement) MetaDefault.NewEntity();
	public static DB_Achievement NewEntity(BGId entityId) => (DB_Achievement) MetaDefault.NewEntity(entityId);
	public static DB_Achievement NewEntity(Action<DB_Achievement> callback)
	{
		return (DB_Achievement) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_Achievement)entity)));
	}
}

public partial class DB_SkillTree : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_SkillTree(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_SkillTree(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5008745342965133602UL,12825028086497987981UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Level
	{
		get => _Level[Index];
		set => _Level[Index] = value;
	}
	public System.Int32 Index
	{
		get => _Index[Index];
		set => _Index[Index] = value;
	}
	public System.String Stat
	{
		get => _Stat[Index];
		set => _Stat[Index] = value;
	}
	public System.String StatMod
	{
		get => _StatMod[Index];
		set => _StatMod[Index] = value;
	}
	public System.Single Value
	{
		get => _Value[Index];
		set => _Value[Index] = value;
	}
	public System.String CostType
	{
		get => _CostType[Index];
		set => _CostType[Index] = value;
	}
	public System.Int32 CostValue
	{
		get => _CostValue[Index];
		set => _CostValue[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5311335960909801093UL, 14633835339498506146UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Level;
	public static BansheeGz.BGDatabase.BGFieldInt _Level => _ufle12jhs77_Level ?? (_ufle12jhs77_Level = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5487479359617724994UL, 3409711827052286377UL), () => _ufle12jhs77_Level = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Index;
	public static BansheeGz.BGDatabase.BGFieldInt _Index => _ufle12jhs77_Index ?? (_ufle12jhs77_Index = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4671337293512223346UL, 264993280510687916UL), () => _ufle12jhs77_Index = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Stat;
	public static BansheeGz.BGDatabase.BGFieldString _Stat => _ufle12jhs77_Stat ?? (_ufle12jhs77_Stat = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5057017940513506758UL, 12966725511140390018UL), () => _ufle12jhs77_Stat = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_StatMod;
	public static BansheeGz.BGDatabase.BGFieldString _StatMod => _ufle12jhs77_StatMod ?? (_ufle12jhs77_StatMod = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5595562146557777439UL, 422791026399830918UL), () => _ufle12jhs77_StatMod = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_Value;
	public static BansheeGz.BGDatabase.BGFieldFloat _Value => _ufle12jhs77_Value ?? (_ufle12jhs77_Value = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5697154256959989211UL, 17807710968701088130UL), () => _ufle12jhs77_Value = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_CostType;
	public static BansheeGz.BGDatabase.BGFieldString _CostType => _ufle12jhs77_CostType ?? (_ufle12jhs77_CostType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5455931428355298360UL, 3598605353010920588UL), () => _ufle12jhs77_CostType = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_CostValue;
	public static BansheeGz.BGDatabase.BGFieldInt _CostValue => _ufle12jhs77_CostValue ?? (_ufle12jhs77_CostValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5426915409275288708UL, 1846705952098395011UL), () => _ufle12jhs77_CostValue = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_SkillTree() : base(MetaDefault)
	{
	}
	private DB_SkillTree(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_SkillTree(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_SkillTree(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_SkillTree FindEntity(Predicate<DB_SkillTree> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_SkillTree) entity)) as DB_SkillTree;
	}
	public static List<DB_SkillTree> FindEntities(Predicate<DB_SkillTree> filter, List<DB_SkillTree> result=null, Comparison<DB_SkillTree> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_SkillTree> action, Predicate<DB_SkillTree> filter=null, Comparison<DB_SkillTree> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_SkillTree) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_SkillTree) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_SkillTree)e1,(DB_SkillTree)e2));
	}
	public static DB_SkillTree GetEntity(BGId entityId) => (DB_SkillTree) MetaDefault.GetEntity(entityId);
	public static DB_SkillTree GetEntity(int index) => (DB_SkillTree) MetaDefault[index];
	public static DB_SkillTree GetEntity(string entityName) => (DB_SkillTree) MetaDefault.GetEntity(entityName);
	public static DB_SkillTree NewEntity() => (DB_SkillTree) MetaDefault.NewEntity();
	public static DB_SkillTree NewEntity(BGId entityId) => (DB_SkillTree) MetaDefault.NewEntity(entityId);
	public static DB_SkillTree NewEntity(Action<DB_SkillTree> callback)
	{
		return (DB_SkillTree) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_SkillTree)entity)));
	}
}

public partial class DB_DungeonRoom : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DungeonRoom(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DungeonRoom(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4723957124337275887UL,1787521231028348589UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Room
	{
		get => _Room[Index];
		set => _Room[Index] = value;
	}
	public System.Int32 Wave
	{
		get => _Wave[Index];
		set => _Wave[Index] = value;
	}
	public System.Single DelayToWave
	{
		get => _DelayToWave[Index];
		set => _DelayToWave[Index] = value;
	}
	public System.String Map
	{
		get => _Map[Index];
		set => _Map[Index] = value;
	}
	public System.String Enemy
	{
		get => _Enemy[Index];
		set => _Enemy[Index] = value;
	}
	public System.Int32 EnemyLevel
	{
		get => _EnemyLevel[Index];
		set => _EnemyLevel[Index] = value;
	}
	public System.String SpawnPoint
	{
		get => _SpawnPoint[Index];
		set => _SpawnPoint[Index] = value;
	}
	public System.Single Delay
	{
		get => _Delay[Index];
		set => _Delay[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	public System.Collections.Generic.List<System.String> DropRate
	{
		get => _DropRate[Index];
		set => _DropRate[Index] = value;
	}
	public System.String Difficult
	{
		get => _Difficult[Index];
		set => _Difficult[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4768313553255173071UL, 11380777204482415541UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Room;
	public static BansheeGz.BGDatabase.BGFieldInt _Room => _ufle12jhs77_Room ?? (_ufle12jhs77_Room = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5743218898362488462UL, 5562031242234372768UL), () => _ufle12jhs77_Room = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Wave;
	public static BansheeGz.BGDatabase.BGFieldInt _Wave => _ufle12jhs77_Wave ?? (_ufle12jhs77_Wave = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5026063367143369812UL, 14703455405203885452UL), () => _ufle12jhs77_Wave = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_DelayToWave;
	public static BansheeGz.BGDatabase.BGFieldFloat _DelayToWave => _ufle12jhs77_DelayToWave ?? (_ufle12jhs77_DelayToWave = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4884022160332176430UL, 8188335955131528094UL), () => _ufle12jhs77_DelayToWave = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Map;
	public static BansheeGz.BGDatabase.BGFieldString _Map => _ufle12jhs77_Map ?? (_ufle12jhs77_Map = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5305254820932526823UL, 14702298605774683264UL), () => _ufle12jhs77_Map = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Enemy;
	public static BansheeGz.BGDatabase.BGFieldString _Enemy => _ufle12jhs77_Enemy ?? (_ufle12jhs77_Enemy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4984886455784506800UL, 12050863600885233795UL), () => _ufle12jhs77_Enemy = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_EnemyLevel;
	public static BansheeGz.BGDatabase.BGFieldInt _EnemyLevel => _ufle12jhs77_EnemyLevel ?? (_ufle12jhs77_EnemyLevel = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5553342077595287608UL, 1441370669183385783UL), () => _ufle12jhs77_EnemyLevel = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_SpawnPoint;
	public static BansheeGz.BGDatabase.BGFieldString _SpawnPoint => _ufle12jhs77_SpawnPoint ?? (_ufle12jhs77_SpawnPoint = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5358809528750684548UL, 9754129163620514993UL), () => _ufle12jhs77_SpawnPoint = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_Delay;
	public static BansheeGz.BGDatabase.BGFieldFloat _Delay => _ufle12jhs77_Delay ?? (_ufle12jhs77_Delay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5727035542802755847UL, 16031826245881710495UL), () => _ufle12jhs77_Delay = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldListString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(4951819857598060339UL, 10239152148185465517UL), () => _ufle12jhs77_Reward = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_DropRate;
	public static BansheeGz.BGDatabase.BGFieldListString _DropRate => _ufle12jhs77_DropRate ?? (_ufle12jhs77_DropRate = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(4668788047945224910UL, 13771478024045136061UL), () => _ufle12jhs77_DropRate = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Difficult;
	public static BansheeGz.BGDatabase.BGFieldString _Difficult => _ufle12jhs77_Difficult ?? (_ufle12jhs77_Difficult = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4792188391388820353UL, 10657566641068048304UL), () => _ufle12jhs77_Difficult = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DungeonRoom() : base(MetaDefault)
	{
	}
	private DB_DungeonRoom(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DungeonRoom(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DungeonRoom(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DungeonRoom FindEntity(Predicate<DB_DungeonRoom> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DungeonRoom) entity)) as DB_DungeonRoom;
	}
	public static List<DB_DungeonRoom> FindEntities(Predicate<DB_DungeonRoom> filter, List<DB_DungeonRoom> result=null, Comparison<DB_DungeonRoom> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DungeonRoom> action, Predicate<DB_DungeonRoom> filter=null, Comparison<DB_DungeonRoom> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DungeonRoom) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DungeonRoom) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DungeonRoom)e1,(DB_DungeonRoom)e2));
	}
	public static DB_DungeonRoom GetEntity(BGId entityId) => (DB_DungeonRoom) MetaDefault.GetEntity(entityId);
	public static DB_DungeonRoom GetEntity(int index) => (DB_DungeonRoom) MetaDefault[index];
	public static DB_DungeonRoom GetEntity(string entityName) => (DB_DungeonRoom) MetaDefault.GetEntity(entityName);
	public static DB_DungeonRoom NewEntity() => (DB_DungeonRoom) MetaDefault.NewEntity();
	public static DB_DungeonRoom NewEntity(BGId entityId) => (DB_DungeonRoom) MetaDefault.NewEntity(entityId);
	public static DB_DungeonRoom NewEntity(Action<DB_DungeonRoom> callback)
	{
		return (DB_DungeonRoom) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DungeonRoom)entity)));
	}
}

public partial class DB_DungeonRoomReward : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DungeonRoomReward(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DungeonRoomReward(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4892555384109478808UL,3525735049568679041UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Room
	{
		get => _Room[Index];
		set => _Room[Index] = value;
	}
	public System.Int32 Index
	{
		get => _Index[Index];
		set => _Index[Index] = value;
	}
	public System.Int32 Chest
	{
		get => _Chest[Index];
		set => _Chest[Index] = value;
	}
	public System.Single Weight
	{
		get => _Weight[Index];
		set => _Weight[Index] = value;
	}
	public System.String Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	public System.String Amount
	{
		get => _Amount[Index];
		set => _Amount[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5597174857144197498UL, 3566322745855427722UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Room;
	public static BansheeGz.BGDatabase.BGFieldInt _Room => _ufle12jhs77_Room ?? (_ufle12jhs77_Room = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5046155285074161988UL, 4233277869078686380UL), () => _ufle12jhs77_Room = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Index;
	public static BansheeGz.BGDatabase.BGFieldInt _Index => _ufle12jhs77_Index ?? (_ufle12jhs77_Index = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5113620274032910618UL, 17553349385374789006UL), () => _ufle12jhs77_Index = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Chest;
	public static BansheeGz.BGDatabase.BGFieldInt _Chest => _ufle12jhs77_Chest ?? (_ufle12jhs77_Chest = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5150682538572923497UL, 10266410644542970276UL), () => _ufle12jhs77_Chest = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_Weight;
	public static BansheeGz.BGDatabase.BGFieldFloat _Weight => _ufle12jhs77_Weight ?? (_ufle12jhs77_Weight = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5460840021545549933UL, 2957386661597481398UL), () => _ufle12jhs77_Weight = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4993799445401748984UL, 7389834967108221058UL), () => _ufle12jhs77_Reward = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Amount;
	public static BansheeGz.BGDatabase.BGFieldString _Amount => _ufle12jhs77_Amount ?? (_ufle12jhs77_Amount = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5295745624713212898UL, 5195243194016952472UL), () => _ufle12jhs77_Amount = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DungeonRoomReward() : base(MetaDefault)
	{
	}
	private DB_DungeonRoomReward(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DungeonRoomReward(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DungeonRoomReward(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DungeonRoomReward FindEntity(Predicate<DB_DungeonRoomReward> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DungeonRoomReward) entity)) as DB_DungeonRoomReward;
	}
	public static List<DB_DungeonRoomReward> FindEntities(Predicate<DB_DungeonRoomReward> filter, List<DB_DungeonRoomReward> result=null, Comparison<DB_DungeonRoomReward> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DungeonRoomReward> action, Predicate<DB_DungeonRoomReward> filter=null, Comparison<DB_DungeonRoomReward> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DungeonRoomReward) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DungeonRoomReward) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DungeonRoomReward)e1,(DB_DungeonRoomReward)e2));
	}
	public static DB_DungeonRoomReward GetEntity(BGId entityId) => (DB_DungeonRoomReward) MetaDefault.GetEntity(entityId);
	public static DB_DungeonRoomReward GetEntity(int index) => (DB_DungeonRoomReward) MetaDefault[index];
	public static DB_DungeonRoomReward GetEntity(string entityName) => (DB_DungeonRoomReward) MetaDefault.GetEntity(entityName);
	public static DB_DungeonRoomReward NewEntity() => (DB_DungeonRoomReward) MetaDefault.NewEntity();
	public static DB_DungeonRoomReward NewEntity(BGId entityId) => (DB_DungeonRoomReward) MetaDefault.NewEntity(entityId);
	public static DB_DungeonRoomReward NewEntity(Action<DB_DungeonRoomReward> callback)
	{
		return (DB_DungeonRoomReward) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DungeonRoomReward)entity)));
	}
}

public partial class DB_HotSaleHero : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_HotSaleHero(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_HotSaleHero(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4813905507515138948UL,8249060833299669920UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.String Hero
	{
		get => _Hero[Index];
		set => _Hero[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	public System.String ProductId
	{
		get => _ProductId[Index];
		set => _ProductId[Index] = value;
	}
	public System.Int32 SaleOff
	{
		get => _SaleOff[Index];
		set => _SaleOff[Index] = value;
	}
	public System.Int32 Time
	{
		get => _Time[Index];
		set => _Time[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5412251642788431809UL, 15604952734620279448UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4672264487290307536UL, 10935212729737473673UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Hero;
	public static BansheeGz.BGDatabase.BGFieldString _Hero => _ufle12jhs77_Hero ?? (_ufle12jhs77_Hero = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5405916505932980001UL, 8943513430688533905UL), () => _ufle12jhs77_Hero = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldListString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5576855721605830004UL, 13090916454908689074UL), () => _ufle12jhs77_Reward = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ProductId;
	public static BansheeGz.BGDatabase.BGFieldString _ProductId => _ufle12jhs77_ProductId ?? (_ufle12jhs77_ProductId = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5028005557962797799UL, 2938671659875722122UL), () => _ufle12jhs77_ProductId = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_SaleOff;
	public static BansheeGz.BGDatabase.BGFieldInt _SaleOff => _ufle12jhs77_SaleOff ?? (_ufle12jhs77_SaleOff = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5138680343283562674UL, 10519805370224524463UL), () => _ufle12jhs77_SaleOff = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Time;
	public static BansheeGz.BGDatabase.BGFieldInt _Time => _ufle12jhs77_Time ?? (_ufle12jhs77_Time = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5715167744539369365UL, 14221101744164355717UL), () => _ufle12jhs77_Time = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_HotSaleHero() : base(MetaDefault)
	{
	}
	private DB_HotSaleHero(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_HotSaleHero(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_HotSaleHero(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_HotSaleHero FindEntity(Predicate<DB_HotSaleHero> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_HotSaleHero) entity)) as DB_HotSaleHero;
	}
	public static List<DB_HotSaleHero> FindEntities(Predicate<DB_HotSaleHero> filter, List<DB_HotSaleHero> result=null, Comparison<DB_HotSaleHero> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_HotSaleHero> action, Predicate<DB_HotSaleHero> filter=null, Comparison<DB_HotSaleHero> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_HotSaleHero) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_HotSaleHero) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_HotSaleHero)e1,(DB_HotSaleHero)e2));
	}
	public static DB_HotSaleHero GetEntity(BGId entityId) => (DB_HotSaleHero) MetaDefault.GetEntity(entityId);
	public static DB_HotSaleHero GetEntity(int index) => (DB_HotSaleHero) MetaDefault[index];
	public static DB_HotSaleHero GetEntity(string entityName) => (DB_HotSaleHero) MetaDefault.GetEntity(entityName);
	public static DB_HotSaleHero NewEntity() => (DB_HotSaleHero) MetaDefault.NewEntity();
	public static DB_HotSaleHero NewEntity(BGId entityId) => (DB_HotSaleHero) MetaDefault.NewEntity(entityId);
	public static DB_HotSaleHero NewEntity(Action<DB_HotSaleHero> callback)
	{
		return (DB_HotSaleHero) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_HotSaleHero)entity)));
	}
}

public partial class DB_Subscription : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_Subscription(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_Subscription(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5390488431382982086UL,9052699000147372182UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.String Type
	{
		get => _Type[Index];
		set => _Type[Index] = value;
	}
	public System.String Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	public System.String RewardDaily
	{
		get => _RewardDaily[Index];
		set => _RewardDaily[Index] = value;
	}
	public System.Single ExtraGoldDungeon
	{
		get => _ExtraGoldDungeon[Index];
		set => _ExtraGoldDungeon[Index] = value;
	}
	public System.Single ExtraExpDungeon
	{
		get => _ExtraExpDungeon[Index];
		set => _ExtraExpDungeon[Index] = value;
	}
	public System.Int32 Energy
	{
		get => _Energy[Index];
		set => _Energy[Index] = value;
	}
	public System.String ProductId
	{
		get => _ProductId[Index];
		set => _ProductId[Index] = value;
	}
	public System.Int32 Time
	{
		get => _Time[Index];
		set => _Time[Index] = value;
	}
	public System.Int32 RemoveAdReward
	{
		get => _RemoveAdReward[Index];
		set => _RemoveAdReward[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4850684894524379842UL, 9965367179793478304UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5461153331483981810UL, 14292625504503785358UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Type;
	public static BansheeGz.BGDatabase.BGFieldString _Type => _ufle12jhs77_Type ?? (_ufle12jhs77_Type = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5294311157860302517UL, 16078808534086082986UL), () => _ufle12jhs77_Type = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5221882458776218725UL, 12584631477606676118UL), () => _ufle12jhs77_Reward = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_RewardDaily;
	public static BansheeGz.BGDatabase.BGFieldString _RewardDaily => _ufle12jhs77_RewardDaily ?? (_ufle12jhs77_RewardDaily = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5241558413287197783UL, 16869440249771777172UL), () => _ufle12jhs77_RewardDaily = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_ExtraGoldDungeon;
	public static BansheeGz.BGDatabase.BGFieldFloat _ExtraGoldDungeon => _ufle12jhs77_ExtraGoldDungeon ?? (_ufle12jhs77_ExtraGoldDungeon = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5415353013653271368UL, 18276977789160551079UL), () => _ufle12jhs77_ExtraGoldDungeon = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_ExtraExpDungeon;
	public static BansheeGz.BGDatabase.BGFieldFloat _ExtraExpDungeon => _ufle12jhs77_ExtraExpDungeon ?? (_ufle12jhs77_ExtraExpDungeon = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5230635132783020995UL, 12066053330349131161UL), () => _ufle12jhs77_ExtraExpDungeon = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Energy;
	public static BansheeGz.BGDatabase.BGFieldInt _Energy => _ufle12jhs77_Energy ?? (_ufle12jhs77_Energy = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4779345035194173629UL, 15030551860582130571UL), () => _ufle12jhs77_Energy = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ProductId;
	public static BansheeGz.BGDatabase.BGFieldString _ProductId => _ufle12jhs77_ProductId ?? (_ufle12jhs77_ProductId = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4693644666909606972UL, 4044523157809649040UL), () => _ufle12jhs77_ProductId = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Time;
	public static BansheeGz.BGDatabase.BGFieldInt _Time => _ufle12jhs77_Time ?? (_ufle12jhs77_Time = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5228867901457542948UL, 1228044628018552986UL), () => _ufle12jhs77_Time = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_RemoveAdReward;
	public static BansheeGz.BGDatabase.BGFieldInt _RemoveAdReward => _ufle12jhs77_RemoveAdReward ?? (_ufle12jhs77_RemoveAdReward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5665955402160472221UL, 7690843726566507662UL), () => _ufle12jhs77_RemoveAdReward = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_Subscription() : base(MetaDefault)
	{
	}
	private DB_Subscription(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_Subscription(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_Subscription(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_Subscription FindEntity(Predicate<DB_Subscription> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_Subscription) entity)) as DB_Subscription;
	}
	public static List<DB_Subscription> FindEntities(Predicate<DB_Subscription> filter, List<DB_Subscription> result=null, Comparison<DB_Subscription> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_Subscription> action, Predicate<DB_Subscription> filter=null, Comparison<DB_Subscription> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_Subscription) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_Subscription) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_Subscription)e1,(DB_Subscription)e2));
	}
	public static DB_Subscription GetEntity(BGId entityId) => (DB_Subscription) MetaDefault.GetEntity(entityId);
	public static DB_Subscription GetEntity(int index) => (DB_Subscription) MetaDefault[index];
	public static DB_Subscription GetEntity(string entityName) => (DB_Subscription) MetaDefault.GetEntity(entityName);
	public static DB_Subscription NewEntity() => (DB_Subscription) MetaDefault.NewEntity();
	public static DB_Subscription NewEntity(BGId entityId) => (DB_Subscription) MetaDefault.NewEntity(entityId);
	public static DB_Subscription NewEntity(Action<DB_Subscription> callback)
	{
		return (DB_Subscription) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_Subscription)entity)));
	}
}

public partial class DB_DungeonWorld : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_DungeonWorld(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_DungeonWorld(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5219163157090872166UL,905890142460743861UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Dungeon
	{
		get => _Dungeon[Index];
		set => _Dungeon[Index] = value;
	}
	public System.Int32 Stage
	{
		get => _Stage[Index];
		set => _Stage[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	public System.Int32 Index
	{
		get => _Index[Index];
		set => _Index[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4767945648568268641UL, 8356029145826425531UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Dungeon;
	public static BansheeGz.BGDatabase.BGFieldInt _Dungeon => _ufle12jhs77_Dungeon ?? (_ufle12jhs77_Dungeon = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5578135738990683020UL, 5590123164987581065UL), () => _ufle12jhs77_Dungeon = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Stage;
	public static BansheeGz.BGDatabase.BGFieldInt _Stage => _ufle12jhs77_Stage ?? (_ufle12jhs77_Stage = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5048760271730281310UL, 11310392044352663208UL), () => _ufle12jhs77_Stage = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldListString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(4980997250495944469UL, 15087291047097450125UL), () => _ufle12jhs77_Reward = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Index;
	public static BansheeGz.BGDatabase.BGFieldInt _Index => _ufle12jhs77_Index ?? (_ufle12jhs77_Index = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4833234620216805859UL, 8171198400190351274UL), () => _ufle12jhs77_Index = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_DungeonWorld() : base(MetaDefault)
	{
	}
	private DB_DungeonWorld(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_DungeonWorld(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_DungeonWorld(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_DungeonWorld FindEntity(Predicate<DB_DungeonWorld> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_DungeonWorld) entity)) as DB_DungeonWorld;
	}
	public static List<DB_DungeonWorld> FindEntities(Predicate<DB_DungeonWorld> filter, List<DB_DungeonWorld> result=null, Comparison<DB_DungeonWorld> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_DungeonWorld> action, Predicate<DB_DungeonWorld> filter=null, Comparison<DB_DungeonWorld> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_DungeonWorld) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_DungeonWorld) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_DungeonWorld)e1,(DB_DungeonWorld)e2));
	}
	public static DB_DungeonWorld GetEntity(BGId entityId) => (DB_DungeonWorld) MetaDefault.GetEntity(entityId);
	public static DB_DungeonWorld GetEntity(int index) => (DB_DungeonWorld) MetaDefault[index];
	public static DB_DungeonWorld GetEntity(string entityName) => (DB_DungeonWorld) MetaDefault.GetEntity(entityName);
	public static DB_DungeonWorld NewEntity() => (DB_DungeonWorld) MetaDefault.NewEntity();
	public static DB_DungeonWorld NewEntity(BGId entityId) => (DB_DungeonWorld) MetaDefault.NewEntity(entityId);
	public static DB_DungeonWorld NewEntity(Action<DB_DungeonWorld> callback)
	{
		return (DB_DungeonWorld) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_DungeonWorld)entity)));
	}
}

public partial class DB_PiggyBank : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_PiggyBank(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_PiggyBank(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5739721427251022760UL,3111275191207854762UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.Int32 Target
	{
		get => _Target[Index];
		set => _Target[Index] = value;
	}
	public System.String Type
	{
		get => _Type[Index];
		set => _Type[Index] = value;
	}
	public System.Int32 Value
	{
		get => _Value[Index];
		set => _Value[Index] = value;
	}
	public System.Int32 ValueAd
	{
		get => _ValueAd[Index];
		set => _ValueAd[Index] = value;
	}
	public System.Int32 ValuePurchase
	{
		get => _ValuePurchase[Index];
		set => _ValuePurchase[Index] = value;
	}
	public System.Int32 TimeReset
	{
		get => _TimeReset[Index];
		set => _TimeReset[Index] = value;
	}
	public System.String ProductId
	{
		get => _ProductId[Index];
		set => _ProductId[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4839816348589263718UL, 526578349481352887UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5441291562687945781UL, 8769638722429335468UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Target;
	public static BansheeGz.BGDatabase.BGFieldInt _Target => _ufle12jhs77_Target ?? (_ufle12jhs77_Target = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5252478165614193184UL, 12631523256979135656UL), () => _ufle12jhs77_Target = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Type;
	public static BansheeGz.BGDatabase.BGFieldString _Type => _ufle12jhs77_Type ?? (_ufle12jhs77_Type = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5273398767271013025UL, 15216680584821301144UL), () => _ufle12jhs77_Type = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Value;
	public static BansheeGz.BGDatabase.BGFieldInt _Value => _ufle12jhs77_Value ?? (_ufle12jhs77_Value = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4946279726455569947UL, 404242722704738229UL), () => _ufle12jhs77_Value = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_ValueAd;
	public static BansheeGz.BGDatabase.BGFieldInt _ValueAd => _ufle12jhs77_ValueAd ?? (_ufle12jhs77_ValueAd = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4711159965772255662UL, 10540469103875832766UL), () => _ufle12jhs77_ValueAd = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_ValuePurchase;
	public static BansheeGz.BGDatabase.BGFieldInt _ValuePurchase => _ufle12jhs77_ValuePurchase ?? (_ufle12jhs77_ValuePurchase = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4794484331169102162UL, 9405694835973010827UL), () => _ufle12jhs77_ValuePurchase = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_TimeReset;
	public static BansheeGz.BGDatabase.BGFieldInt _TimeReset => _ufle12jhs77_TimeReset ?? (_ufle12jhs77_TimeReset = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5164376897008354118UL, 13692475523929488025UL), () => _ufle12jhs77_TimeReset = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ProductId;
	public static BansheeGz.BGDatabase.BGFieldString _ProductId => _ufle12jhs77_ProductId ?? (_ufle12jhs77_ProductId = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5037576494665895663UL, 13155242121559796381UL), () => _ufle12jhs77_ProductId = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_PiggyBank() : base(MetaDefault)
	{
	}
	private DB_PiggyBank(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_PiggyBank(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_PiggyBank(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_PiggyBank FindEntity(Predicate<DB_PiggyBank> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_PiggyBank) entity)) as DB_PiggyBank;
	}
	public static List<DB_PiggyBank> FindEntities(Predicate<DB_PiggyBank> filter, List<DB_PiggyBank> result=null, Comparison<DB_PiggyBank> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_PiggyBank> action, Predicate<DB_PiggyBank> filter=null, Comparison<DB_PiggyBank> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_PiggyBank) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_PiggyBank) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_PiggyBank)e1,(DB_PiggyBank)e2));
	}
	public static DB_PiggyBank GetEntity(BGId entityId) => (DB_PiggyBank) MetaDefault.GetEntity(entityId);
	public static DB_PiggyBank GetEntity(int index) => (DB_PiggyBank) MetaDefault[index];
	public static DB_PiggyBank GetEntity(string entityName) => (DB_PiggyBank) MetaDefault.GetEntity(entityName);
	public static DB_PiggyBank NewEntity() => (DB_PiggyBank) MetaDefault.NewEntity();
	public static DB_PiggyBank NewEntity(BGId entityId) => (DB_PiggyBank) MetaDefault.NewEntity(entityId);
	public static DB_PiggyBank NewEntity(Action<DB_PiggyBank> callback)
	{
		return (DB_PiggyBank) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_PiggyBank)entity)));
	}
}

public partial class DB_FlashSale : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_FlashSale(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_FlashSale(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5333571145037181886UL,13017567486082353797UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.String Type
	{
		get => _Type[Index];
		set => _Type[Index] = value;
	}
	public System.Collections.Generic.List<System.String> Rewards
	{
		get => _Rewards[Index];
		set => _Rewards[Index] = value;
	}
	public System.Int32 Time
	{
		get => _Time[Index];
		set => _Time[Index] = value;
	}
	public System.Int32 MaxShowInDay
	{
		get => _MaxShowInDay[Index];
		set => _MaxShowInDay[Index] = value;
	}
	public System.String ProductId
	{
		get => _ProductId[Index];
		set => _ProductId[Index] = value;
	}
	public System.Int32 SaleOff
	{
		get => _SaleOff[Index];
		set => _SaleOff[Index] = value;
	}
	public System.Int32 XValue
	{
		get => _XValue[Index];
		set => _XValue[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5490144691821933614UL, 3939185597639126150UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5470613825123137292UL, 15343353600694072456UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Type;
	public static BansheeGz.BGDatabase.BGFieldString _Type => _ufle12jhs77_Type ?? (_ufle12jhs77_Type = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5404709370947717611UL, 12337550396153101975UL), () => _ufle12jhs77_Type = null));
	private static BansheeGz.BGDatabase.BGFieldListString _ufle12jhs77_Rewards;
	public static BansheeGz.BGDatabase.BGFieldListString _Rewards => _ufle12jhs77_Rewards ?? (_ufle12jhs77_Rewards = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldListString>(MetaDefault, new BGId(5522036790014960074UL, 15500624527463517580UL), () => _ufle12jhs77_Rewards = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Time;
	public static BansheeGz.BGDatabase.BGFieldInt _Time => _ufle12jhs77_Time ?? (_ufle12jhs77_Time = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(4844768492117203907UL, 6798363851519392179UL), () => _ufle12jhs77_Time = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_MaxShowInDay;
	public static BansheeGz.BGDatabase.BGFieldInt _MaxShowInDay => _ufle12jhs77_MaxShowInDay ?? (_ufle12jhs77_MaxShowInDay = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5114015188677713490UL, 15682328951999216043UL), () => _ufle12jhs77_MaxShowInDay = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ProductId;
	public static BansheeGz.BGDatabase.BGFieldString _ProductId => _ufle12jhs77_ProductId ?? (_ufle12jhs77_ProductId = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5455386011720523241UL, 15792549341917836223UL), () => _ufle12jhs77_ProductId = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_SaleOff;
	public static BansheeGz.BGDatabase.BGFieldInt _SaleOff => _ufle12jhs77_SaleOff ?? (_ufle12jhs77_SaleOff = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5322143543562959435UL, 9735382875988445862UL), () => _ufle12jhs77_SaleOff = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_XValue;
	public static BansheeGz.BGDatabase.BGFieldInt _XValue => _ufle12jhs77_XValue ?? (_ufle12jhs77_XValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5336208751277879096UL, 15313347413487022468UL), () => _ufle12jhs77_XValue = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_FlashSale() : base(MetaDefault)
	{
	}
	private DB_FlashSale(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_FlashSale(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_FlashSale(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_FlashSale FindEntity(Predicate<DB_FlashSale> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_FlashSale) entity)) as DB_FlashSale;
	}
	public static List<DB_FlashSale> FindEntities(Predicate<DB_FlashSale> filter, List<DB_FlashSale> result=null, Comparison<DB_FlashSale> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_FlashSale> action, Predicate<DB_FlashSale> filter=null, Comparison<DB_FlashSale> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_FlashSale) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_FlashSale) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_FlashSale)e1,(DB_FlashSale)e2));
	}
	public static DB_FlashSale GetEntity(BGId entityId) => (DB_FlashSale) MetaDefault.GetEntity(entityId);
	public static DB_FlashSale GetEntity(int index) => (DB_FlashSale) MetaDefault[index];
	public static DB_FlashSale GetEntity(string entityName) => (DB_FlashSale) MetaDefault.GetEntity(entityName);
	public static DB_FlashSale NewEntity() => (DB_FlashSale) MetaDefault.NewEntity();
	public static DB_FlashSale NewEntity(BGId entityId) => (DB_FlashSale) MetaDefault.NewEntity(entityId);
	public static DB_FlashSale NewEntity(Action<DB_FlashSale> callback)
	{
		return (DB_FlashSale) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_FlashSale)entity)));
	}
}

public partial class DB_PlayGift : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_PlayGift(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_PlayGift(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5288068583622175455UL,4524499945399995793UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.String Reward
	{
		get => _Reward[Index];
		set => _Reward[Index] = value;
	}
	public System.String ProductId
	{
		get => _ProductId[Index];
		set => _ProductId[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(4721157846364238928UL, 4574055955837960364UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5448858655654763372UL, 14783201238174019239UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Reward;
	public static BansheeGz.BGDatabase.BGFieldString _Reward => _ufle12jhs77_Reward ?? (_ufle12jhs77_Reward = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5754067955036753012UL, 1125428699006725548UL), () => _ufle12jhs77_Reward = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ProductId;
	public static BansheeGz.BGDatabase.BGFieldString _ProductId => _ufle12jhs77_ProductId ?? (_ufle12jhs77_ProductId = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5287700547043714984UL, 4791691672698140584UL), () => _ufle12jhs77_ProductId = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_PlayGift() : base(MetaDefault)
	{
	}
	private DB_PlayGift(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_PlayGift(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_PlayGift(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_PlayGift FindEntity(Predicate<DB_PlayGift> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_PlayGift) entity)) as DB_PlayGift;
	}
	public static List<DB_PlayGift> FindEntities(Predicate<DB_PlayGift> filter, List<DB_PlayGift> result=null, Comparison<DB_PlayGift> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_PlayGift> action, Predicate<DB_PlayGift> filter=null, Comparison<DB_PlayGift> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_PlayGift) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_PlayGift) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_PlayGift)e1,(DB_PlayGift)e2));
	}
	public static DB_PlayGift GetEntity(BGId entityId) => (DB_PlayGift) MetaDefault.GetEntity(entityId);
	public static DB_PlayGift GetEntity(int index) => (DB_PlayGift) MetaDefault[index];
	public static DB_PlayGift GetEntity(string entityName) => (DB_PlayGift) MetaDefault.GetEntity(entityName);
	public static DB_PlayGift NewEntity() => (DB_PlayGift) MetaDefault.NewEntity();
	public static DB_PlayGift NewEntity(BGId entityId) => (DB_PlayGift) MetaDefault.NewEntity(entityId);
	public static DB_PlayGift NewEntity(Action<DB_PlayGift> callback)
	{
		return (DB_PlayGift) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_PlayGift)entity)));
	}
}

public partial class DB_ShopResource : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_ShopResource(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_ShopResource(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(4736416003013188495UL,7431225986376046728UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.String Resource
	{
		get => _Resource[Index];
		set => _Resource[Index] = value;
	}
	public System.Int32 Value
	{
		get => _Value[Index];
		set => _Value[Index] = value;
	}
	public System.String Cost
	{
		get => _Cost[Index];
		set => _Cost[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5238988096962720970UL, 2731927070789507509UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Resource;
	public static BansheeGz.BGDatabase.BGFieldString _Resource => _ufle12jhs77_Resource ?? (_ufle12jhs77_Resource = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5269970924158508286UL, 12515394320943140257UL), () => _ufle12jhs77_Resource = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Value;
	public static BansheeGz.BGDatabase.BGFieldInt _Value => _ufle12jhs77_Value ?? (_ufle12jhs77_Value = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5353261411232057331UL, 15470245447855884181UL), () => _ufle12jhs77_Value = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Cost;
	public static BansheeGz.BGDatabase.BGFieldString _Cost => _ufle12jhs77_Cost ?? (_ufle12jhs77_Cost = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4648050395534287597UL, 6212107005819906449UL), () => _ufle12jhs77_Cost = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_ShopResource() : base(MetaDefault)
	{
	}
	private DB_ShopResource(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_ShopResource(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_ShopResource(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_ShopResource FindEntity(Predicate<DB_ShopResource> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_ShopResource) entity)) as DB_ShopResource;
	}
	public static List<DB_ShopResource> FindEntities(Predicate<DB_ShopResource> filter, List<DB_ShopResource> result=null, Comparison<DB_ShopResource> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_ShopResource> action, Predicate<DB_ShopResource> filter=null, Comparison<DB_ShopResource> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_ShopResource) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_ShopResource) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_ShopResource)e1,(DB_ShopResource)e2));
	}
	public static DB_ShopResource GetEntity(BGId entityId) => (DB_ShopResource) MetaDefault.GetEntity(entityId);
	public static DB_ShopResource GetEntity(int index) => (DB_ShopResource) MetaDefault[index];
	public static DB_ShopResource GetEntity(string entityName) => (DB_ShopResource) MetaDefault.GetEntity(entityName);
	public static DB_ShopResource NewEntity() => (DB_ShopResource) MetaDefault.NewEntity();
	public static DB_ShopResource NewEntity(BGId entityId) => (DB_ShopResource) MetaDefault.NewEntity(entityId);
	public static DB_ShopResource NewEntity(Action<DB_ShopResource> callback)
	{
		return (DB_ShopResource) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_ShopResource)entity)));
	}
}

public partial class DB_Talent : BGEntity
{

	public class Factory : BGEntity.EntityFactory
	{
		public BGEntity NewEntity(BGMetaEntity meta) => new DB_Talent(meta);
		public BGEntity NewEntity(BGMetaEntity meta, BGId id) => new DB_Talent(meta, id);
	}
	private static BansheeGz.BGDatabase.BGMetaRow _metaDefault;
	public static BansheeGz.BGDatabase.BGMetaRow MetaDefault => _metaDefault ?? (_metaDefault = BGCodeGenUtils.GetMeta<BansheeGz.BGDatabase.BGMetaRow>(new BGId(5076918950834249285UL,4785551003822676909UL), () => _metaDefault = null));
	public static BansheeGz.BGDatabase.BGRepoEvents Events => BGRepo.I.Events;
	public static int CountEntities => MetaDefault.CountEntities;
	public System.String name
	{
		get => _name[Index];
		set => _name[Index] = value;
	}
	public System.Int32 Id
	{
		get => _Id[Index];
		set => _Id[Index] = value;
	}
	public System.String Quality
	{
		get => _Quality[Index];
		set => _Quality[Index] = value;
	}
	public System.String StatName
	{
		get => _StatName[Index];
		set => _StatName[Index] = value;
	}
	public System.String ModifyType
	{
		get => _ModifyType[Index];
		set => _ModifyType[Index] = value;
	}
	public System.Single ModifyValue
	{
		get => _ModifyValue[Index];
		set => _ModifyValue[Index] = value;
	}
	public System.Int32 MaxLevel
	{
		get => _MaxLevel[Index];
		set => _MaxLevel[Index] = value;
	}
	public System.Single Weight
	{
		get => _Weight[Index];
		set => _Weight[Index] = value;
	}
	public System.String Format
	{
		get => _Format[Index];
		set => _Format[Index] = value;
	}
	private static BansheeGz.BGDatabase.BGFieldEntityName _ufle12jhs77_name;
	public static BansheeGz.BGDatabase.BGFieldEntityName _name => _ufle12jhs77_name ?? (_ufle12jhs77_name = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldEntityName>(MetaDefault, new BGId(5196134697118495186UL, 2595289745459814299UL), () => _ufle12jhs77_name = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_Id;
	public static BansheeGz.BGDatabase.BGFieldInt _Id => _ufle12jhs77_Id ?? (_ufle12jhs77_Id = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5214347499006649411UL, 9585789554320389253UL), () => _ufle12jhs77_Id = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Quality;
	public static BansheeGz.BGDatabase.BGFieldString _Quality => _ufle12jhs77_Quality ?? (_ufle12jhs77_Quality = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5209283866220484678UL, 7231865511162752154UL), () => _ufle12jhs77_Quality = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_StatName;
	public static BansheeGz.BGDatabase.BGFieldString _StatName => _ufle12jhs77_StatName ?? (_ufle12jhs77_StatName = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(4843989736974248038UL, 17280182548565710730UL), () => _ufle12jhs77_StatName = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_ModifyType;
	public static BansheeGz.BGDatabase.BGFieldString _ModifyType => _ufle12jhs77_ModifyType ?? (_ufle12jhs77_ModifyType = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5007039980975087700UL, 9079264653159691148UL), () => _ufle12jhs77_ModifyType = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_ModifyValue;
	public static BansheeGz.BGDatabase.BGFieldFloat _ModifyValue => _ufle12jhs77_ModifyValue ?? (_ufle12jhs77_ModifyValue = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(4845185109530495102UL, 17113384327783797144UL), () => _ufle12jhs77_ModifyValue = null));
	private static BansheeGz.BGDatabase.BGFieldInt _ufle12jhs77_MaxLevel;
	public static BansheeGz.BGDatabase.BGFieldInt _MaxLevel => _ufle12jhs77_MaxLevel ?? (_ufle12jhs77_MaxLevel = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldInt>(MetaDefault, new BGId(5293376502947307952UL, 16285965953925423537UL), () => _ufle12jhs77_MaxLevel = null));
	private static BansheeGz.BGDatabase.BGFieldFloat _ufle12jhs77_Weight;
	public static BansheeGz.BGDatabase.BGFieldFloat _Weight => _ufle12jhs77_Weight ?? (_ufle12jhs77_Weight = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldFloat>(MetaDefault, new BGId(5274582261477903695UL, 5590137879563234952UL), () => _ufle12jhs77_Weight = null));
	private static BansheeGz.BGDatabase.BGFieldString _ufle12jhs77_Format;
	public static BansheeGz.BGDatabase.BGFieldString _Format => _ufle12jhs77_Format ?? (_ufle12jhs77_Format = BGCodeGenUtils.GetField<BansheeGz.BGDatabase.BGFieldString>(MetaDefault, new BGId(5159166729531050597UL, 17758595685467011222UL), () => _ufle12jhs77_Format = null));
	private static readonly DB_Hero.Factory _factory0_PFS = new DB_Hero.Factory();
	private static readonly DB_Equipment.Factory _factory1_PFS = new DB_Equipment.Factory();
	private static readonly DB_Buff.Factory _factory2_PFS = new DB_Buff.Factory();
	private static readonly DB_Enemy.Factory _factory3_PFS = new DB_Enemy.Factory();
	private static readonly DB_BattlePass.Factory _factory4_PFS = new DB_BattlePass.Factory();
	private static readonly DB_Weapon.Factory _factory5_PFS = new DB_Weapon.Factory();
	private static readonly DB_HeroLevelUpgrade.Factory _factory6_PFS = new DB_HeroLevelUpgrade.Factory();
	private static readonly DB_EquipmentRarity.Factory _factory7_PFS = new DB_EquipmentRarity.Factory();
	private static readonly DB_Exp.Factory _factory8_PFS = new DB_Exp.Factory();
	private static readonly DB_GeneralConfig.Factory _factory9_PFS = new DB_GeneralConfig.Factory();
	private static readonly DB_BlackSmithUpgrade.Factory _factory10_PFS = new DB_BlackSmithUpgrade.Factory();
	private static readonly DB_NoelBattlePass.Factory _factory11_PFS = new DB_NoelBattlePass.Factory();
	private static readonly DB_AffixEquipment.Factory _factory12_PFS = new DB_AffixEquipment.Factory();
	private static readonly DB_DungeonStage.Factory _factory13_PFS = new DB_DungeonStage.Factory();
	private static readonly DB_Dungeon.Factory _factory14_PFS = new DB_Dungeon.Factory();
	private static readonly DB_HeroStarUpgrade.Factory _factory15_PFS = new DB_HeroStarUpgrade.Factory();
	private static readonly DB_EquipmentConfig.Factory _factory16_PFS = new DB_EquipmentConfig.Factory();
	private static readonly DB_BuffConfig.Factory _factory17_PFS = new DB_BuffConfig.Factory();
	private static readonly DB_HeroConfig.Factory _factory18_PFS = new DB_HeroConfig.Factory();
	private static readonly DB_IapConfig.Factory _factory19_PFS = new DB_IapConfig.Factory();
	private static readonly DB_OfferDungeon.Factory _factory20_PFS = new DB_OfferDungeon.Factory();
	private static readonly DB_Chest.Factory _factory21_PFS = new DB_Chest.Factory();
	private static readonly DB_OfferGem.Factory _factory22_PFS = new DB_OfferGem.Factory();
	private static readonly DB_OfferGold.Factory _factory23_PFS = new DB_OfferGold.Factory();
	private static readonly DB_DungeonEventGoldRoom.Factory _factory24_PFS = new DB_DungeonEventGoldRoom.Factory();
	private static readonly DB_DungeonEventScrollRoom.Factory _factory25_PFS = new DB_DungeonEventScrollRoom.Factory();
	private static readonly DB_DungeonEventStoneRoom.Factory _factory26_PFS = new DB_DungeonEventStoneRoom.Factory();
	private static readonly DB_DungeonEventGold.Factory _factory27_PFS = new DB_DungeonEventGold.Factory();
	private static readonly DB_DungeonEventScroll.Factory _factory28_PFS = new DB_DungeonEventScroll.Factory();
	private static readonly DB_DungeonEventStone.Factory _factory29_PFS = new DB_DungeonEventStone.Factory();
	private static readonly DB_DungeonEventConfig.Factory _factory30_PFS = new DB_DungeonEventConfig.Factory();
	private static readonly DB_DungeonEventStage.Factory _factory31_PFS = new DB_DungeonEventStage.Factory();
	private static readonly DB_DailyQuest.Factory _factory32_PFS = new DB_DailyQuest.Factory();
	private static readonly DB_DailyQuestProgress.Factory _factory33_PFS = new DB_DailyQuestProgress.Factory();
	private static readonly DB_Achievement.Factory _factory34_PFS = new DB_Achievement.Factory();
	private static readonly DB_SkillTree.Factory _factory35_PFS = new DB_SkillTree.Factory();
	private static readonly DB_DungeonRoom.Factory _factory36_PFS = new DB_DungeonRoom.Factory();
	private static readonly DB_DungeonRoomReward.Factory _factory37_PFS = new DB_DungeonRoomReward.Factory();
	private static readonly DB_HotSaleHero.Factory _factory38_PFS = new DB_HotSaleHero.Factory();
	private static readonly DB_Subscription.Factory _factory39_PFS = new DB_Subscription.Factory();
	private static readonly DB_DungeonWorld.Factory _factory40_PFS = new DB_DungeonWorld.Factory();
	private static readonly DB_PiggyBank.Factory _factory41_PFS = new DB_PiggyBank.Factory();
	private static readonly DB_FlashSale.Factory _factory42_PFS = new DB_FlashSale.Factory();
	private static readonly DB_PlayGift.Factory _factory43_PFS = new DB_PlayGift.Factory();
	private static readonly DB_ShopResource.Factory _factory44_PFS = new DB_ShopResource.Factory();
	private static readonly DB_Talent.Factory _factory45_PFS = new DB_Talent.Factory();
	private DB_Talent() : base(MetaDefault)
	{
	}
	private DB_Talent(BGId id) : base(MetaDefault, id)
	{
	}
	private DB_Talent(BGMetaEntity meta) : base(meta)
	{
	}
	private DB_Talent(BGMetaEntity meta, BGId id) : base(meta, id)
	{
	}
	public static DB_Talent FindEntity(Predicate<DB_Talent> filter)
	{
		return MetaDefault.FindEntity(entity => filter==null || filter((DB_Talent) entity)) as DB_Talent;
	}
	public static List<DB_Talent> FindEntities(Predicate<DB_Talent> filter, List<DB_Talent> result=null, Comparison<DB_Talent> sort=null) => BGCodeGenUtils.FindEntities(MetaDefault, filter, result, sort);
	public static void ForEachEntity(Action<DB_Talent> action, Predicate<DB_Talent> filter=null, Comparison<DB_Talent> sort=null)
	{
		MetaDefault.ForEachEntity(entity => action((DB_Talent) entity), filter == null ? null : (Predicate<BGEntity>) (entity => filter((DB_Talent) entity)), sort==null?(Comparison<BGEntity>) null:(e1,e2) => sort((DB_Talent)e1,(DB_Talent)e2));
	}
	public static DB_Talent GetEntity(BGId entityId) => (DB_Talent) MetaDefault.GetEntity(entityId);
	public static DB_Talent GetEntity(int index) => (DB_Talent) MetaDefault[index];
	public static DB_Talent GetEntity(string entityName) => (DB_Talent) MetaDefault.GetEntity(entityName);
	public static DB_Talent NewEntity() => (DB_Talent) MetaDefault.NewEntity();
	public static DB_Talent NewEntity(BGId entityId) => (DB_Talent) MetaDefault.NewEntity(entityId);
	public static DB_Talent NewEntity(Action<DB_Talent> callback)
	{
		return (DB_Talent) MetaDefault.NewEntity(new BGMetaEntity.NewEntityContext(entity => callback((DB_Talent)entity)));
	}
}
#pragma warning restore 414
